<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zeroruby.github.io</id>
    <title>红玉のblog • Posts by &#34;学习笔记&#34; category</title>
    <link href="https://zeroruby.github.io" />
    <updated>2023-10-24T16:00:00.000Z</updated>
    <category term="程序" />
    <category term="unity" />
    <category term="关卡" />
    <category term="战斗" />
    <entry>
        <id>https://zeroruby.github.io/2023/10/25/Unity%E6%8F%92%E4%BB%B6%E5%88%B6%E4%BD%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
        <title>Unity插件制作学习笔记</title>
        <link rel="alternate" href="https://zeroruby.github.io/2023/10/25/Unity%E6%8F%92%E4%BB%B6%E5%88%B6%E4%BD%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
        <content type="html">&lt;p&gt;记录自己学习 unity 制作插件时的细节和 tips，有任何问题或疑惑请随时通过主页联系方式联系我一起探讨。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%B8%80-%E8%87%AA%E5%AE%9A%E4%B9%89inspector%E7%95%8C%E9%9D%A2&#34;&gt;一、自定义 Inspector 界面&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E5%B1%9E%E6%80%A7%E7%9B%B8%E5%85%B3%E6%A0%87%E8%AF%86&#34;&gt;1、属性相关标识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%95%8C%E9%9D%A2%E5%B1%9E%E6%80%A7&#34;&gt;2、自定义界面属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97%E5%8C%96%E5%B1%9E%E6%80%A7%E5%AD%97%E6%AE%B5&#34;&gt;3、自定义序列化属性字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%93%8D%E4%BD%9C%E7%95%8C%E9%9D%A2&#34;&gt;4、自定义操作界面&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#a-%E7%95%8C%E9%9D%A2%E7%9A%84%E5%90%AF%E5%8A%A8%E5%92%8C%E5%85%B3%E9%97%AD&#34;&gt;a、界面的启动和关闭&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#b-%E7%95%8C%E9%9D%A2%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%9B%B8%E5%85%B3&#34;&gt;b、界面的事件相关&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#c-%E6%96%87%E6%9C%AC%E9%A2%9C%E8%89%B2%E5%AD%97%E6%AE%B5&#34;&gt;c、文本 / 颜色字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#d-%E6%A0%87%E7%AD%BE%E5%AD%97%E6%AE%B5&#34;&gt;d、标签字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#e-%E8%BE%93%E5%85%A5%E5%AD%97%E6%AE%B5&#34;&gt;e、输入字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#f-%E6%BB%91%E5%8A%A8%E6%9D%A1&#34;&gt;f、滑动条&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#g-vector%E8%BE%93%E5%85%A5%E5%AD%97%E6%AE%B5&#34;&gt;g、Vector 输入字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#h-%E9%80%89%E6%8B%A9&#34;&gt;h、选择&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;hr&gt;
&lt;h1&gt;&lt;span id=&#34;一-自定义-inspector-界面&#34;&gt; 一、自定义 Inspector 界面&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span id=&#34;1-属性相关标识&#34;&gt; 1、属性相关标识&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;5 种变量在 inspector 隐藏和显示的方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using System;

public class Value : MonoBehaviour
&amp;#123;
    
    public int int1;  

    [HideInInspector]//直接隐藏在inspector  
    public int int2=3;  

    [NonSerialized]//隐藏的同时不会保存被inspector序列化后的值   
    public int int3=3;//即更改inspector的值不会影响脚本的初始赋值  

    [SerializeField]//将私有变量显示在inspector  
    private int int4;  

    public ValueTest valueTest = new ValueTest();  

&amp;#125;

[Serializable]//可让自定义的类显示在inspector  
public class ValueTest   
&amp;#123;
    public int int5;  
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最终在 inspector 的表现效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231025225218480.png&#34; alt=&#34;image-20231025225218480&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里涉及到 unity 中 inspector 的数据持久化问题，即序列化，参考文档：&lt;a href=&#34;https://docs.unity.cn/cn/2020.3/Manual/script-Serialization.html&#34;&gt;脚本序列化 - Unity 手册&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;“序列化是将数据结构或对象状态转换为 Unity 可存储并在以后可重构的格式的自动过程。”&lt;/p&gt;
&lt;p&gt;如果在自定义 inspector 的脚本中，没有使用派生子 editor 基类的方法 FindProperty () 来获取 target 中的变量时，是无法被序列化保存的，需要注意。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;2-自定义界面属性&#34;&gt; 2、自定义界面属性&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;创建自定义界面需要在 Asset 路径下创建名为 Editor 的文件夹，此命名的文件夹打包时不会被打包（Resources 文件夹同理，在 load 方法加载资源时要注意路径&lt;a href=&#34;https://docs.unity.cn/cn/2019.3/ScriptReference/Resources.Load.html&#34;&gt;（Resources-Load - Unity 脚本 API）&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;创建上述 Value 的自定义 inspector：&lt;/p&gt;
&lt;p&gt;第一步：创建继承 Editor 基类的脚本，并将其放在 Editor 文件夹下，并声明是 Value 的界面&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

[CustomEditor(typeof(Value))]
public class ValueEditor :Editor
&amp;#123;
  
    public SerializedObject mObj;   //定义序列化目标对象
    //序列化出来几个属性
    //属性对应的是[CustomEditor(typeof(Value))]中，Value类里面的属性

    public SerializedProperty int1;
    public SerializedProperty int2;
    public SerializedProperty int3;
    public SerializedProperty int4;
    public SerializedProperty valueTest;

    //选择当前游戏对象
    private void OnEnable()
    &amp;#123;
        //初始化
        this.mObj = new SerializedObject(target);
        //通过字符串名字，查找Test1类里面的属性，并进行初始化
        this.int1 = this.mObj.FindProperty(&amp;quot;int1&amp;quot;);
        this.int2 = this.mObj.FindProperty(&amp;quot;int2&amp;quot;);
        this.int3 = this.mObj.FindProperty(&amp;quot;int3&amp;quot;);
        this.int4 = this.mObj.FindProperty(&amp;quot;int4&amp;quot;);
        this.valueTest = this.mObj.FindProperty(&amp;quot;valueTest&amp;quot;);
    &amp;#125;

    //绘制
    public override void OnInspectorGUI()
    &amp;#123;
        this.mObj.Update();

        EditorGUILayout.PropertyField(this.int1);
        EditorGUILayout.PropertyField(this.int2);
        //EditorGUILayout.PropertyField(this.int3);
        //因为int3是不被序列化的，所以这里不能写此语句
        EditorGUILayout.PropertyField(this.int4);
        EditorGUILayout.PropertyField(this.valueTest, true);
        //true属性意思是设置显示子节点，也就是显示TypeDemo里面的属性

        this.mObj.ApplyModifiedProperties();
        //应用属性修改
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231025232755437.png&#34; alt=&#34;image-20231025232755437&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到自定义的 Editor 界面不受类本身的属性标识控制。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;3-自定义序列化属性字段&#34;&gt; 3、自定义序列化属性字段&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;此时，我想要当前属性随着我的枚举值的变化而变化，即我选择一个枚举时，其他属性处于不被 editor 绘制的状态。&lt;/p&gt;
&lt;p&gt;方法：&lt;/p&gt;
&lt;p&gt;第一步，创建并书写对应类的脚本和编辑器脚本，这里分别命名为 EnumEditor 和 Enum。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using System;

public class Enum : MonoBehaviour
&amp;#123;
    public selectedEnum selectedEnum;
    public GameObject 碰撞盒;
    public GameObject 特效;
    public AnimationClip 动作;
&amp;#125;

[Serializable]
public enum selectedEnum
&amp;#123; 
碰撞盒,
特效,
动作,
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;仅有 Enum 时&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231025234839268.png&#34; alt=&#34;image-20231025234839268&#34;&gt;&lt;/p&gt;
&lt;p&gt;EnumEditor：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

[CustomEditor(typeof(Enum))]
public class EnumEditor : Editor
&amp;#123;
    public SerializedObject mObj;
    public SerializedProperty selectedEnum;
    public SerializedProperty 碰撞盒;
    public SerializedProperty 特效;
    public SerializedProperty 动作;

    private void OnEnable()
    &amp;#123;
        //初始化
        this.mObj = new SerializedObject(target);
        this.selectedEnum = this.mObj.FindProperty(&amp;quot;selectedEnum&amp;quot;);
        this.碰撞盒 = this.mObj.FindProperty(&amp;quot;碰撞盒&amp;quot;);
        this.特效 = this.mObj.FindProperty(&amp;quot;特效&amp;quot;);
        this.动作 = this.mObj.FindProperty(&amp;quot;动作&amp;quot;);
    &amp;#125;

    public override void OnInspectorGUI()
    &amp;#123;
        this.mObj.Update();
        EditorGUILayout.PropertyField(this.selectedEnum);
        switch (this.selectedEnum.enumValueIndex)
        &amp;#123;
            case 0:
                EditorGUILayout.PropertyField(this.碰撞盒);
                break;
            case 1:
                EditorGUILayout.PropertyField(this.特效);
                break;
            case 2:
                EditorGUILayout.PropertyField(this.动作);
                break;
        &amp;#125;

        this.mObj.ApplyModifiedProperties();
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编写后&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231025235035035.png&#34; alt=&#34;image-20231025235035035&#34;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;4-自定义操作界面&#34;&gt; 4、自定义操作界面&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;当我们需要自定义操作界面时：&lt;/p&gt;
&lt;p&gt;需要用到 EditorGUILayout 方法：&lt;a href=&#34;https://docs.unity.cn/cn/2019.4/ScriptReference/EditorGUILayout.html&#34;&gt;EditorGUILayout - Unity 脚本 API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下是常用的。&lt;/p&gt;
&lt;h3&gt;&lt;span id=&#34;a-界面的启动和关闭&#34;&gt; a、界面的启动和关闭&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;创建一个类，存放在 Assets–&amp;gt;Editor 里面，并继承自 EditorWindow&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
public class WindowsEditor : EditorWindow
&amp;#123;
    [MenuItem(&amp;quot;Menu/EditorWindow&amp;quot;)]
    //声明窗口路径

    public static void ShowWindow()
    &amp;#123;
        //CreateInstance会允许创建多个窗口，推荐使用系统自带的单例模式getwindows
        //使用官方提供的实例化窗口方法调用
        WindowsEditor.CreateInstance&amp;lt;WindowsEditor&amp;gt;().Show();

        //浮动型的窗口，跟点击Building Setting出现的窗口效果一样
        WindowsEditor.CreateInstance&amp;lt;WindowsEditor&amp;gt;().ShowUtility();

        //弹出窗口时的效果
        WindowsEditor.CreateInstance&amp;lt;WindowsEditor&amp;gt;().ShowPopup();
        //此方法和下面的OnGUI配合着使用，否则会出现页面关不掉的情况,此时不会出现UI自带的关闭界面

        //使用系统提供的单例模式，在unity面板中打开窗口时，只会出现一个(推荐)
        WindowsEditor.GetWindow&amp;lt;WindowsEditor&amp;gt;().Show();
    &amp;#125;

    public void OnGUI()
    &amp;#123;
        if (GUILayout.Button(&amp;quot;关闭&amp;quot;))
        &amp;#123;
            this.Close();
        &amp;#125;
    &amp;#125;
    
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;每个方法效果如下&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231026000101143.png&#34; alt=&#34;image-20231026000101143&#34;&gt;&lt;/th&gt;
&lt;th&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231026000129453.png&#34; alt=&#34;image-20231026000129453&#34;&gt;&lt;/th&gt;
&lt;th&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231026000158455.png&#34; alt=&#34;image-20231026000158455&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Show&lt;/td&gt;
&lt;td&gt;ShowUtility&lt;/td&gt;
&lt;td&gt;ShowPopup&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;span id=&#34;b-界面的事件相关&#34;&gt; b、界面的事件相关&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;自定义页面中有时会使用自定义的事件，事件通常如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    public int index_1 = 0;
    //刷新方法，每秒钟100次
    public void Update()
    &amp;#123;
        index_1++;
        Debug.Log(&amp;quot;index_1：&amp;quot; + index_1);
    &amp;#125;

    public int index_2 = 0;
    //刷新方法，刷新周期比Update小
    public void OnInspectorUpdate()
    &amp;#123;
        index_2++;
        Debug.Log(&amp;quot;index_2：&amp;quot; + index_2);
    &amp;#125;

    //视图被删除的时候触发
    public void OnDestroy()
    &amp;#123;
        Debug.Log(&amp;quot;OnDestroy：触发&amp;quot;);
    &amp;#125;

    //选择一个对象的时候触发
    public void OnSelectionChange()
    &amp;#123;
        //获取选择Hierarchy里面游戏物体的时候的名字
        for (int i = 0; i &amp;lt; Selection.gameObjects.Length; i++)
        &amp;#123;
            Debug.Log(&amp;quot;OnSelectionChange：触发&amp;quot; + Selection.gameObjects[i].name);
        &amp;#125;

        //获取选择Project里面的文件的名字
        for (int i = 0; i &amp;lt; Selection.objects.Length; i++)
        &amp;#123;
            Debug.Log(&amp;quot;OnSelectionChange：触发&amp;quot; + Selection.objects[i].name);
        &amp;#125;
    &amp;#125;

    //获得焦点的时候触发
    public void OnFocus()
    &amp;#123;
        Debug.Log(&amp;quot;OnFocus：触发&amp;quot;);
    &amp;#125;

    //失去焦点的时候触发
    public void OnLostFocus()
    &amp;#123;
        Debug.Log(&amp;quot;OnLostFocus：触发&amp;quot;);
    &amp;#125;

    //Hierarchy更改的时候触发
    public void OnHierarchyChange()
    &amp;#123;
        Debug.Log(&amp;quot;OnHierarchyChange：触发&amp;quot;);
    &amp;#125;

    //Project更改的时候触发
    public void OnProjectChange()
    &amp;#123;
        Debug.Log(&amp;quot;OnProjectChange：触发&amp;quot;);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;span id=&#34;c-文本-颜色字段&#34;&gt; c、文本 / 颜色字段&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;
    public string 文本 = &amp;quot;默认文字&amp;quot;;
    public Color 颜色 = Color.white;
    public void OnGUI()
    &amp;#123;
        if (GUILayout.Button(&amp;quot;关闭&amp;quot;))
        &amp;#123;
            this.Close();
        &amp;#125;
        //一行文本，单行输入框
        this.文本 = EditorGUILayout.TextField(this.文本);
        //多行输入框
        this.文本 = EditorGUILayout.TextArea(this.文本);
        //密码输入框
        this.文本 = EditorGUILayout.PasswordField(this.文本);
        //颜色选择框
        this.颜色 = EditorGUILayout.ColorField(this.颜色);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231026001735821.png&#34; alt=&#34;image-20231026001735821&#34;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span id=&#34;d-标签字段&#34;&gt; d、标签字段&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;类似于 [header (“”)] 标识，在 gui 中显示 tag。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    public string 文本 = &amp;quot;默认文字&amp;quot;;
    public Color 颜色 = Color.white;
	public void OnGUI()
    &amp;#123;
        //标签
        EditorGUILayout.PrefixLabel(this.文本);//只写这么一行代码，窗口里面不出现任何内容
        EditorGUILayout.Space();//换行

        //标签（下拉框）
        this.文本 = EditorGUILayout.TagField(this.文本);
        EditorGUILayout.Space();

        //标签（非可选择标签提示）
        EditorGUILayout.LabelField(this.文本);
        EditorGUILayout.Space();

        //标签（可选择标签提示）
        EditorGUILayout.SelectableLabel(this.文本);
        EditorGUILayout.Space();
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231026002300584.png&#34; alt=&#34;image-20231026002300584&#34;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span id=&#34;e-输入字段&#34;&gt; e、输入字段&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;   public string 文本 = &amp;quot;默认文字&amp;quot;;
    public int 数字;

    public void OnGUI()
    &amp;#123;
        EditorGUILayout.LabelField(&amp;quot;输入整形数字&amp;quot;);
        this.数字 = EditorGUILayout.IntField(this.数字);
        EditorGUILayout.LabelField(&amp;quot;输入字符&amp;quot;);
        this.文本 = EditorGUILayout.TextField(this.文本);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231026002601592.png&#34; alt=&#34;image-20231026002601592&#34;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span id=&#34;f-滑动条&#34;&gt; f、滑动条&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    public int 数字;
    public float 浮点数;
    public float 浮点最大值;
    public float 浮点最小值;
    public void OnGUI()
    &amp;#123;
        //滑动条  参数1：默认值，参数2：最小值，参数3：最大值
        this.浮点数 = EditorGUILayout.Slider(this.浮点数, 0, 100);//取值区间有小数

        this.数字 = EditorGUILayout.IntSlider(this.数字, 0, 100);//取值区间为整数

        //最小值到最大值的取值范围，为0-100
        EditorGUILayout.MinMaxSlider(ref 浮点最小值, ref 浮点最大值, 0, 100);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231026003117435.png&#34; alt=&#34;image-20231026003117435&#34;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span id=&#34;g-vector-输入字段&#34;&gt; g、Vector 输入字段&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    public Vector3 mPos3;
    public void OnGUI()
    &amp;#123;
        this.mPos3 = EditorGUILayout.Vector3Field(&amp;quot;三维坐标&amp;quot;, this.mPos3);
        EditorGUILayout.Space();
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231026003443557.png&#34; alt=&#34;image-20231026003443557&#34;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span id=&#34;h-选择&#34;&gt; h、选择&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public int index;
public void OnGUI()
    &amp;#123;        
    	string[] strs = &amp;#123; &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot; ,&amp;quot;e&amp;quot;&amp;#125;;
        int[] ints = &amp;#123; 1, 2, 3, 4, 5 &amp;#125;;
        this.index = EditorGUILayout.Popup(this.index, strs);
        this.index = EditorGUILayout.IntPopup(this.index, strs,ints);
        EditorGUILayout.Space();
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231026004155844.png&#34; alt=&#34;image-20231026004155844&#34;&gt;&lt;/p&gt;
&lt;p&gt;i、对象选择&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    public string mTag;
    public int mLayer;
    public Object mObject;
    public void OnGUI()
    &amp;#123;
        //标签，下面两种写法，哪个都可以
        //this.mTag = EditorGUILayout.TagField(this.mTag);
        this.mTag = EditorGUILayout.TagField(&amp;quot;Tag&amp;quot;);
        EditorGUILayout.Space();
        //层
         this.mLayer = EditorGUILayout.LayerField(this.mLayer);
         EditorGUILayout.Space();
         //对象选择，如果想要存放所有的元素，那么参数就写为Object： typeof(Object)
        this.mObject = EditorGUILayout.ObjectField(&amp;quot;对象选择器&amp;quot;, this.mObject, typeof(Camera), true);
   &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;参考文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/yzx885059439/p/14497026.html&#34;&gt;Unity3D 插件开发教程 - 挽风入我怀 - 博客园 (cnblogs.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/fancybit/p/InspectorPersistantProblem.html&#34;&gt;Unity 自定义 Inspector 面板时的数据持久化问题 - FancyBit - 博客园 (cnblogs.com)&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="程序" />
        <category term="unity" />
        <updated>2023-10-24T16:00:00.000Z</updated>
    </entry>
</feed>
