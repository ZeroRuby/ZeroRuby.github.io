{
    "version": "https://jsonfeed.org/version/1",
    "title": "红玉のblog",
    "description": "",
    "home_page_url": "https://zeroruby.github.io",
    "items": [
        {
            "id": "https://zeroruby.github.io/2023/10/25/Unity%E6%8F%92%E4%BB%B6%E5%88%B6%E4%BD%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "url": "https://zeroruby.github.io/2023/10/25/Unity%E6%8F%92%E4%BB%B6%E5%88%B6%E4%BD%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "title": "Unity插件制作学习笔记",
            "date_published": "2023-10-24T16:00:00.000Z",
            "content_html": "<p>记录自己学习 unity 制作插件时的细节和 tips，有任何问题或疑惑请随时通过主页联系方式联系我一起探讨。</p>\n<span id=\"more\"></span>\n<hr>\n<!-- toc -->\n<ul>\n<li><a href=\"#%E4%B8%80-%E8%87%AA%E5%AE%9A%E4%B9%89inspector%E7%95%8C%E9%9D%A2\">一、自定义 Inspector 界面</a>\n<ul>\n<li><a href=\"#1-%E5%B1%9E%E6%80%A7%E7%9B%B8%E5%85%B3%E6%A0%87%E8%AF%86\">1、属性相关标识</a></li>\n<li><a href=\"#2-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%95%8C%E9%9D%A2%E5%B1%9E%E6%80%A7\">2、自定义界面属性</a></li>\n<li><a href=\"#3-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97%E5%8C%96%E5%B1%9E%E6%80%A7%E5%AD%97%E6%AE%B5\">3、自定义序列化属性字段</a></li>\n<li><a href=\"#4-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%93%8D%E4%BD%9C%E7%95%8C%E9%9D%A2\">4、自定义操作界面</a>\n<ul>\n<li><a href=\"#a-%E7%95%8C%E9%9D%A2%E7%9A%84%E5%90%AF%E5%8A%A8%E5%92%8C%E5%85%B3%E9%97%AD\">a、界面的启动和关闭</a></li>\n<li><a href=\"#b-%E7%95%8C%E9%9D%A2%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%9B%B8%E5%85%B3\">b、界面的事件相关</a></li>\n<li><a href=\"#c-%E6%96%87%E6%9C%AC%E9%A2%9C%E8%89%B2%E5%AD%97%E6%AE%B5\">c、文本 / 颜色字段</a></li>\n<li><a href=\"#d-%E6%A0%87%E7%AD%BE%E5%AD%97%E6%AE%B5\">d、标签字段</a></li>\n<li><a href=\"#e-%E8%BE%93%E5%85%A5%E5%AD%97%E6%AE%B5\">e、输入字段</a></li>\n<li><a href=\"#f-%E6%BB%91%E5%8A%A8%E6%9D%A1\">f、滑动条</a></li>\n<li><a href=\"#g-vector%E8%BE%93%E5%85%A5%E5%AD%97%E6%AE%B5\">g、Vector 输入字段</a></li>\n<li><a href=\"#h-%E9%80%89%E6%8B%A9\">h、选择</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<hr>\n<h1><span id=\"一-自定义-inspector-界面\"> 一、自定义 Inspector 界面</span></h1>\n<h2><span id=\"1-属性相关标识\"> 1、属性相关标识</span></h2>\n<p>5 种变量在 inspector 隐藏和显示的方法</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Value</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> int1<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HideInInspector</span></span><span class=\"token punctuation\">]</span><span class=\"token comment\">// 直接隐藏在 inspector  </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> int2<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">NonSerialized</span></span><span class=\"token punctuation\">]</span><span class=\"token comment\">// 隐藏的同时不会保存被 inspector 序列化后的值   </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> int3<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 即更改 inspector 的值不会影响脚本的初始赋值  </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span><span class=\"token comment\">// 将私有变量显示在 inspector  </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> int4<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ValueTest</span> valueTest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ValueTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Serializable</span></span><span class=\"token punctuation\">]</span><span class=\"token comment\">// 可让自定义的类显示在 inspector  </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ValueTest</span>   </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> int5<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最终在 inspector 的表现效果如下：</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"image-20231025225218480.png\" alt=\"image-20231025225218480\"></p>\n<h2><span id=\"2-自定义界面属性\"> 2、自定义界面属性</span></h2>\n<p>创建自定义界面需要在 Asset 路径下创建名为 Editor 的文件夹，此命名的文件夹打包时不会被打包（Resources 文件夹同理，在 load 方法加载资源时要注意路径<a href=\"https://docs.unity.cn/cn/2019.3/ScriptReference/Resources.Load.html\">（Resources-Load - Unity 脚本 API）</a>）</p>\n<p>创建上述 Value 的自定义 inspector：</p>\n<p>第一步：创建继承 Editor 基类的脚本，并将其放在 Editor 文件夹下，并声明是 Value 的界面</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEditor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CustomEditor</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ValueEditor</span> <span class=\"token punctuation\">:</span><span class=\"token type-list\"><span class=\"token class-name\">Editor</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SerializedObject</span> mObj<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 定义序列化目标对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 序列化出来几个属性</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 属性对应的是 [CustomEditor (typeof (Value))] 中，Value 类里面的属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SerializedProperty</span> int1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SerializedProperty</span> int2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SerializedProperty</span> int3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SerializedProperty</span> int4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SerializedProperty</span> valueTest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 选择当前游戏对象</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnEnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SerializedObject</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 通过字符串名字，查找 Test1 类里面的属性，并进行初始化</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>int1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mObj<span class=\"token punctuation\">.</span><span class=\"token function\">FindProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>int2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mObj<span class=\"token punctuation\">.</span><span class=\"token function\">FindProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>int3 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mObj<span class=\"token punctuation\">.</span><span class=\"token function\">FindProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>int4 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mObj<span class=\"token punctuation\">.</span><span class=\"token function\">FindProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>valueTest <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mObj<span class=\"token punctuation\">.</span><span class=\"token function\">FindProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"valueTest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 绘制</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnInspectorGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mObj<span class=\"token punctuation\">.</span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">PropertyField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>int1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">PropertyField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>int2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">//EditorGUILayout.PropertyField(this.int3);</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 因为 int3 是不被序列化的，所以这里不能写此语句</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">PropertyField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>int4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">PropertyField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>valueTest<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">//true 属性意思是设置显示子节点，也就是显示 TypeDemo 里面的属性</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mObj<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyModifiedProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 应用属性修改</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>效果如图</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"image-20231025232755437.png\" alt=\"image-20231025232755437\"></p>\n<p>可以看到自定义的 Editor 界面不受类本身的属性表示控制。</p>\n<h2><span id=\"3-自定义序列化属性字段\"> 3、自定义序列化属性字段</span></h2>\n<p>此时，我想要当前属性随着我的枚举值的变化而变化，即我选择一个枚举时，其他属性处于不被 editor 绘制的状态。</p>\n<p>方法：</p>\n<p>第一步，创建并书写对应类的脚本和编辑器脚本，这里分别命名为 EnumEditor 和 Enum。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enum</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">selectedEnum</span> selectedEnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> GameObject 碰撞盒<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> GameObject 特效<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> AnimationClip 动作<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Serializable</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">selectedEnum</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>碰撞盒<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>特效<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>动作<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>仅有 Enum 时</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"image-20231025234839268.png\" alt=\"image-20231025234839268\"></p>\n<p>EnumEditor：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEditor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CustomEditor</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Enum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumEditor</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Editor</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SerializedObject</span> mObj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SerializedProperty</span> selectedEnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> SerializedProperty 碰撞盒<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> SerializedProperty 特效<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> SerializedProperty 动作<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnEnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SerializedObject</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>selectedEnum <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mObj<span class=\"token punctuation\">.</span><span class=\"token function\">FindProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"selectedEnum\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>碰撞盒 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mObj<span class=\"token punctuation\">.</span><span class=\"token function\">FindProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"碰撞盒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>特效 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mObj<span class=\"token punctuation\">.</span><span class=\"token function\">FindProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"特效\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>动作 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mObj<span class=\"token punctuation\">.</span><span class=\"token function\">FindProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"动作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnInspectorGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mObj<span class=\"token punctuation\">.</span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">PropertyField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>selectedEnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 使用 switch 做条件筛选，this.mEnumDemo.enumValueIndex 作为筛选条件，index 从 0 开始，由于我设置枚举类型的第一个属性为 None，所以 case 的值从 1 开始。</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>selectedEnum<span class=\"token punctuation\">.</span>enumValueIndex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">PropertyField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>碰撞盒<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">PropertyField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>特效<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">PropertyField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>动作<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mObj<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyModifiedProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写后</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"image-20231025235035035.png\" alt=\"image-20231025235035035\"></p>\n<h2><span id=\"4-自定义操作界面\"> 4、自定义操作界面</span></h2>\n<p>当我们需要自定义操作界面时：</p>\n<p>需要用到 EditorGUILayout 方法：<a href=\"https://docs.unity.cn/cn/2019.4/ScriptReference/EditorGUILayout.html\">EditorGUILayout - Unity 脚本 API</a></p>\n<p>以下是常用的。</p>\n<h3><span id=\"a-界面的启动和关闭\"> a、界面的启动和关闭</span></h3>\n<p>创建一个类，存放在 Assets–&gt;Editor 里面，并继承自 EditorWindow</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEditor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WindowsEditor</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">EditorWindow</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MenuItem</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Menu/EditorWindow\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 声明窗口路径</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//CreateInstance 会允许创建多个窗口，推荐使用系统自带的单例模式 getwindows</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 使用官方提供的实例化窗口方法调用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        WindowsEditor<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WindowsEditor<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 浮动型的窗口，跟点击 Building Setting 出现的窗口效果一样</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        WindowsEditor<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WindowsEditor<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ShowUtility</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 弹出窗口时的效果</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        WindowsEditor<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WindowsEditor<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ShowPopup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 此方法和下面的 OnGUI 配合着使用，否则会出现页面关不掉的情况，此时不会出现 UI 自带的关闭界面</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 使用系统提供的单例模式，在 unity 面板中打开窗口时，只会出现一个 (推荐)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        WindowsEditor<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetWindow</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WindowsEditor<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"关闭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>每个方法效果如下</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"/images/Emoji.gif\" data-original=\"image-20231026000101143.png\" alt=\"image-20231026000101143\"></th>\n<th><img src=\"/images/Emoji.gif\" data-original=\"image-20231026000129453.png\" alt=\"image-20231026000129453\"></th>\n<th><img src=\"/images/Emoji.gif\" data-original=\"image-20231026000158455.png\" alt=\"image-20231026000158455\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Show</td>\n<td>ShowUtility</td>\n<td>ShowPopup</td>\n</tr>\n</tbody>\n</table>\n<h3><span id=\"b-界面的事件相关\"> b、界面的事件相关</span></h3>\n<p>自定义页面中有时会使用自定义的事件，事件通常如下：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index_1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 刷新方法，每秒钟 100 次</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        index_1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index_1：\"</span> <span class=\"token operator\">+</span> index_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index_2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 刷新方法，刷新周期比 Update 小</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnInspectorUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        index_2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index_2：\"</span> <span class=\"token operator\">+</span> index_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 视图被删除的时候触发</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OnDestroy：触发\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 选择一个对象的时候触发</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnSelectionChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 获取选择 Hierarchy 里面游戏物体的时候的名字</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Selection<span class=\"token punctuation\">.</span>gameObjects<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OnSelectionChange：触发\"</span> <span class=\"token operator\">+</span> Selection<span class=\"token punctuation\">.</span>gameObjects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 获取选择 Project 里面的文件的名字</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Selection<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OnSelectionChange：触发\"</span> <span class=\"token operator\">+</span> Selection<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 获得焦点的时候触发</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OnFocus：触发\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 失去焦点的时候触发</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnLostFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OnLostFocus：触发\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">//Hierarchy 更改的时候触发</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnHierarchyChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OnHierarchyChange：触发\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">//Project 更改的时候触发</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnProjectChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OnProjectChange：触发\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3><span id=\"c-文本-颜色字段\"> c、文本 / 颜色字段</span></h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> 文本 <span class=\"token operator\">=</span> <span class=\"token string\">\"默认文字\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> Color 颜色 <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"关闭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 一行文本，单行输入框</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>文本 <span class=\"token operator\">=</span> EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">TextField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>文本<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 多行输入框</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>文本 <span class=\"token operator\">=</span> EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">TextArea</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>文本<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 密码输入框</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>文本 <span class=\"token operator\">=</span> EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">PasswordField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>文本<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 颜色选择框</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>颜色 <span class=\"token operator\">=</span> EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">ColorField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>颜色<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>效果如下：</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"image-20231026001735821.png\" alt=\"image-20231026001735821\"></p>\n<h3><span id=\"d-标签字段\"> d、标签字段</span></h3>\n<p>类似于 [header (“”)] 标识，在 gui 中显示 tag。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> 文本 <span class=\"token operator\">=</span> <span class=\"token string\">\"默认文字\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> Color 颜色 <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 标签</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">PrefixLabel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>文本<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 只写这么一行代码，窗口里面不出现任何内容</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Space</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 换行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 标签（下拉框）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>文本 <span class=\"token operator\">=</span> EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">TagField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>文本<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Space</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 标签（非可选择标签提示）</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">LabelField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>文本<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Space</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 标签（可选择标签提示）</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">SelectableLabel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>文本<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Space</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>效果如下：</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"image-20231026002300584.png\" alt=\"image-20231026002300584\"></p>\n<h3><span id=\"e-输入字段\"> e、输入字段</span></h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> 文本 <span class=\"token operator\">=</span> <span class=\"token string\">\"默认文字\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> 数字<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">LabelField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入整形数字\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>数字 <span class=\"token operator\">=</span> EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">IntField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>数字<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">LabelField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入字符\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>文本 <span class=\"token operator\">=</span> EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">TextField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>文本<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>效果如下：</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"image-20231026002601592.png\" alt=\"image-20231026002601592\"></p>\n<h3><span id=\"f-滑动条\"> f、滑动条</span></h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> 数字<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> 浮点数<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> 浮点最大值<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> 浮点最小值<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 滑动条  参数 1：默认值，参数 2：最小值，参数 3：最大值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>浮点数 <span class=\"token operator\">=</span> EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Slider</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>浮点数<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 取值区间有小数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>数字 <span class=\"token operator\">=</span> EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">IntSlider</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>数字<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 取值区间为整数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 最小值到最大值的取值范围，为 0-100</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">MinMaxSlider</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> 浮点最小值<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> 浮点最大值<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>效果如下：</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"image-20231026003117435.png\" alt=\"image-20231026003117435\"></p>\n<h3><span id=\"g-vector-输入字段\"> g、Vector 输入字段</span></h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Vector3</span> mPos3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mPos3 <span class=\"token operator\">=</span> EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Vector3Field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"三维坐标\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mPos3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Space</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>效果如下：</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"image-20231026003443557.png\" alt=\"image-20231026003443557\"></p>\n<h3><span id=\"h-选择\"> h、选择</span></h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \t<span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> strs <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span> <span class=\"token punctuation\">,</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> ints <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Popup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">,</span> strs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">IntPopup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">,</span> strs<span class=\"token punctuation\">,</span>ints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Space</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img src=\"/images/Emoji.gif\" data-original=\"image-20231026004155844.png\" alt=\"image-20231026004155844\"></p>\n<p>i、对象选择</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> mTag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> mLayer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> mObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 标签，下面两种写法，哪个都可以</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//this.mTag = EditorGUILayout.TagField(this.mTag);</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mTag <span class=\"token operator\">=</span> EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">TagField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Space</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 层</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mLayer <span class=\"token operator\">=</span> EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">LayerField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mLayer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Space</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token comment\">// 对象选择，如果想要存放所有的元素，那么参数就写为 Object： typeof (Object)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mObject <span class=\"token operator\">=</span> EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">ObjectField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对象选择器\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mObject<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Camera</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<p>从其他博客中学到的，原作者：<a href=\"https://www.cnblogs.com/yzx885059439/p/14497026.html\">Unity3D 插件开发教程 - 挽风入我怀 - 博客园 (cnblogs.com)</a></p>\n",
            "tags": [
                "程序",
                "unity"
            ]
        },
        {
            "id": "https://zeroruby.github.io/2023/10/19/%E6%89%93%E5%87%BB%E6%84%9F%E4%BC%98%E5%8C%96%E8%AE%BE%E8%AE%A1/",
            "url": "https://zeroruby.github.io/2023/10/19/%E6%89%93%E5%87%BB%E6%84%9F%E4%BC%98%E5%8C%96%E8%AE%BE%E8%AE%A1/",
            "title": "打击感和战斗手感优化设计",
            "date_published": "2023-10-18T16:00:00.000Z",
            "content_html": "<p>一篇关于如何进行打击感和战斗手感优化的文章</p>\n<span id=\"more\"></span>\n<hr>\n<!-- toc -->\n<ul>\n<li><a href=\"#%E4%B8%80-%E5%89%8D%E8%A8%80\">一、前言</a>\n<ul>\n<li><a href=\"#1-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BC%98%E5%8C%96%E6%89%93%E5%87%BB%E6%84%9F\">1、为什么要优化打击感</a></li>\n<li><a href=\"#2-%E4%BB%80%E4%B9%88%E6%98%AF%E4%BC%98%E7%A7%80%E7%9A%84%E6%88%98%E6%96%97%E6%89%8B%E6%84%9F\">2、什么是优秀的战斗手感</a></li>\n<li><a href=\"#3-%E4%BB%80%E4%B9%88%E6%98%AF%E4%BC%98%E7%A7%80%E7%9A%84%E6%88%98%E6%96%97%E6%89%8B%E6%84%9F\">3、什么是优秀的战斗手感</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%BA%8C-%E6%89%93%E5%87%BB%E6%84%9F%E5%92%8C%E6%89%8B%E6%84%9F%E7%9A%84%E5%BD%B1%E5%93%8D%E5%9B%A0%E7%B4%A0\">二、打击感和手感的影响因素</a></li>\n<li><a href=\"#%E4%B8%89-%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E6%89%93%E5%87%BB%E6%84%9F\">三、如何优化打击感</a>\n<ul>\n<li><a href=\"#1-%E8%A7%86%E8%A7%89%E5%9B%A0%E7%B4%A0\">1、视觉因素</a>\n<ul>\n<li><a href=\"#1%E5%8A%A8%E4%BD%9C\">（1）动作</a></li>\n<li><a href=\"#2%E4%BD%8D%E7%A7%BB\">（2）位移</a></li>\n<li><a href=\"#3%E7%89%B9%E6%95%88\">（3）特效</a></li>\n<li><a href=\"#4ui%E5%92%8C%E5%90%8E%E5%A4%84%E7%90%86\">（4）UI 和后处理</a></li>\n</ul>\n</li>\n<li><a href=\"#2-%E5%90%AC%E8%A7%89%E5%9B%A0%E7%B4%A0\">2、听觉因素</a>\n<ul>\n<li><a href=\"#1%E9%9F%B3%E6%95%88\">（1）音效</a></li>\n</ul>\n</li>\n<li><a href=\"#3-%E8%BE%93%E5%85%A5%E5%9B%A0%E7%B4%A0\">3、输入因素</a>\n<ul>\n<li><a href=\"#1%E5%88%A4%E5%AE%9A\">（1）判定</a></li>\n<li><a href=\"#dic-id%E5%8A%A8%E4%BD%9C%E5%8F%96%E6%B6%882%E5%8A%A8%E4%BD%9C%E5%8F%96%E6%B6%88div\"><dic id=\"动作取消\">（2）动作取消</dic></a></li>\n</ul>\n</li>\n<li><a href=\"#4-%E8%A7%A6%E8%A7%89%E5%9B%A0%E7%B4%A0\">4、触觉因素</a>\n<ul>\n<li><a href=\"#1%E6%8E%A7%E5%88%B6%E5%99%A8%E9%9C%87%E5%8A%A8\">（1）控制器震动</a></li>\n<li><a href=\"#2%E5%8A%9B%E5%8F%8D%E9%A6%88%E6%89%B3%E6%9C%BA\">（2）力反馈扳机</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<hr>\n<h1><span id=\"一-前言\"> 一、前言</span></h1>\n<h2><span id=\"1-为什么要优化打击感\"> 1、为什么要优化打击感</span></h2>\n<p>打击感对于任何一个拥有动作元素的游戏来说都是不可或缺的。通常来说，打击感优化会是动作游戏中一个较为核心的模块，也是一个难以做好的模块。</p>\n<p>但是打击感的提升对于游戏品质、玩家体感方面的提升都是巨大的，所以对于一款以战斗为核心的游戏而言，打击感的优化是比较重要的。</p>\n<p>另外，此处需要感谢<a href=\"https://space.bilibili.com/27429148?spm_id_from=333.999.0.0\">哲哥</a>的内容分享</p>\n<h2><span id=\"2-什么是优秀的战斗手感\"> 2、什么是优秀的战斗手感</span></h2>\n<p>战斗手感和打击感需要围绕三个重要因素进行设计</p>\n<ul>\n<li><strong>顺</strong>：优秀的动作操作体验应当非常顺滑，按下按钮立刻有所对应反应，做到所控即所得。</li>\n<li><strong>准</strong>：只有当命中反馈尽量精准时，才能让玩家信任游戏的操控体验，做到人机交互的统一。</li>\n<li><strong>爽</strong>：战斗节奏需要从压抑到释放的节奏变化，通过动作与各类视效、镜头和的联动达到对感官的本能冲击。</li>\n</ul>\n<h2><span id=\"3-什么是优秀的战斗手感\"> 3、什么是优秀的战斗手感</span></h2>\n<ul>\n<li>干脆利落</li>\n<li>攻击意图明确</li>\n<li>攻守双方协调统一</li>\n<li>动特音一体化</li>\n</ul>\n<h1><span id=\"二-打击感和手感的影响因素\"> 二、打击感和手感的影响因素</span></h1>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E5%BD%B1%E5%93%8D%E5%9B%A0%E7%B4%A0.png\" alt=\"影响因素\"></p>\n<p>通过人的感知对打击感区分了四个方向的影响因素</p>\n<ul>\n<li>视觉：\n<ul>\n<li>动作</li>\n<li>位移</li>\n<li>特效</li>\n<li>UI</li>\n<li>后处理</li>\n</ul>\n</li>\n<li>听觉\n<ul>\n<li>音效</li>\n<li>背景音乐</li>\n</ul>\n</li>\n<li>输入\n<ul>\n<li>动作取消</li>\n<li>受击判定</li>\n<li>指令输入</li>\n</ul>\n</li>\n<li>触觉\n<ul>\n<li>控制器震动</li>\n</ul>\n</li>\n</ul>\n<h1><span id=\"三-如何优化打击感\"> 三、如何优化打击感</span></h1>\n<h2><span id=\"1-视觉因素\"> 1、视觉因素</span></h2>\n<h3><span id=\"1动作\"> （1）动作</span></h3>\n<ul>\n<li>\n<h4><span id=\"攻击动作\"> 攻击动作</span></h4>\n<ul>\n<li>\n<p>符合发力原理</p>\n<p>对于任何一个动作设计而言，其基本都需要符合发力原理。</p>\n<p>以人形骨骼为例，通常以腿→腰胯→肩手头的发力顺序来保证动作看起来顺畅。</p>\n<p>参考武打港片中（如：叶问系列）的打戏镜头，可以看出发力要符合人体结构才能看起来真实</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E5%8F%B6%E9%97%AE%E5%86%B2%E6%8B%B3.gif\" alt=\"叶问冲拳\" title=\"叶问 日字冲拳\"></p>\n</li>\n<li>\n<p>符合攻击意图</p>\n<ul>\n<li>蓄力→释放</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E6%99%AE%E9%80%9A%E5%8A%A8%E4%BD%9C.gif\" alt=\"普通动作\"></p>\n<p>​\t\t\t\t\t这是一个没有任何蓄力的动作设计 <strong>↑</strong></p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E8%93%84%E5%8A%9B%E5%8A%A8%E4%BD%9C.gif\" alt=\"蓄力动作\"></p>\n<p>​\t\t\t\t\t这是添加了蓄力动作的设计 <strong>↑</strong></p>\n<p>​\t\t\t\t\t由此可见一个有节奏的动作设计需要在每帧内的速度各不相同，如果动画同学在进行动作设计的同时没有注意这\t\t\t\t\t点，很有可能导致最后动作设计缺少打击感。</p>\n<ul>\n<li>\n<p>需要有后摇缓冲</p>\n<p>对于一个攻击动作而言，无论其是否能被取消（<a href=\"#动作取消\">动作取消</a>），都需要设计其攻击判定结束后的收招动作，是确保动作的连贯性和演出性质的重要因素。同时搭配动作取消，能成为影响操作手感的重要因素。</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E5%8E%9F%E7%A5%9E%E6%94%B6%E5%89%91.gif\" alt=\"原神收剑\" title=\"原神迪卢克收剑动作\"></p>\n</li>\n</ul>\n</li>\n<li>\n<h4><span id=\"受击-动作\"> 受击 动作</span></h4>\n<ul>\n<li>\n<p>夸张化处理</p>\n<p>对于 videogame 而言，通常由于缺少大银幕、运镜、对焦等拍摄手法，其表现力通常不如影视作品，所以在游戏中的动作设计通常会比影视作品中更加夸张化处理一点。</p>\n</li>\n<li>\n<p>一帧切原则</p>\n<p>通常动作游戏的打击感强调爽快、精准和迅速的反馈，所以当角色受到攻击后，需要参考一帧切原则进行受击动画的播放。即：角色从当前动作过度到受击动作的播放只能使用一帧的过度时间</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E4%B8%80%E5%B8%A7%E5%88%87%E5%8E%9F%E5%88%99.gif\" alt=\"一帧切原则\" title=\"一帧切原则\"></p>\n<p>而在以强调真实感的拟真游戏当中，动作设计以真实感为核心，所以此时无需参考一帧切原则，可以使用较长的过渡动画。</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E5%88%87%E6%9E%AA%E5%A1%94%E7%A7%91%E5%A4%AB.gif\" alt=\"切枪塔科夫\"></p>\n</li>\n<li>\n<p>分档合理</p>\n<p>在 ARPG/ACT 游戏中，受击动作会根据规则进行分档</p>\n<ul>\n<li>\n<p>融合受击：不会打断角色当前的动作，通过动画遮罩实现受击动作和当前动作的融合。</p>\n</li>\n<li>\n<p>大 / 小受击：此类型受击会打断角色当前动作，通过一帧切播放受击动画来打断角色当前动作。</p>\n</li>\n<li>\n<p>击飞受击：角色受到重受击后，自身产生击飞类型的受击位移。</p>\n<p>通常重受击会投放在连段中的最后一段，符合战斗从压抑到释放的节奏，如果将重攻击投放在普攻中间，会导致连段无法连上，破坏玩家战斗节奏</p>\n</li>\n</ul>\n</li>\n<li>\n<p>动画融合</p>\n<p>以 unity 为例用动画层（layers）和动画遮罩（avatar mask）实现动画融合，可以提高受击动作流畅性</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"image-20231019084938968.png\" alt=\"image-20231019084938968\"></p>\n<p>通过在 unity 中新建新的动画 layer，在播放受击动画依照动画层级和权重进行动作播放</p>\n<p>例如：当角色的上半身碰撞盒受击时，Body 层的动作播放受击动作权重为 100%，而下半身通过播放权重 20%，通过 IK 实现动画的连贯性，避免出现上半身受击，而下半身动作很大的错误案例</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E4%B8%80%E5%B8%A7%E5%88%87%E5%8E%9F%E5%88%99.gif\" alt=\"一帧切原则\"></p>\n<p>以同样的例子可以看出，在街霸 6 中的实现就是如此，当角色上半身受击时、下半身动作幅度并不大</p>\n</li>\n<li>\n<p>体型衰减</p>\n<p>如果在游戏中都是人形 avatar 且体型相差不大的情况下可以不使用体型衰减（如 FTG），但对于出现体型不同的怪物，例如当正常体型的人形角色攻击大体型怪物时，会需要有相应的受击衰减，可通过<a href=\"#韧性机制\"> 韧性机制</a>进行受击判定</p>\n</li>\n<li>\n<p>受身动作</p>\n<p>当角色受到大幅度受击动作后，通常应该有一个受身动作，其节奏随游戏不同略有不同，在格斗游戏中，角色受击后的起身应该保持尽可能相同的帧数，确保玩家在面对不同角色的时候的战斗节奏不会发生太大的变化。</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E5%AE%88%E8%BA%AB%E5%8A%A8%E4%BD%9C.gif\" alt=\"守身动作\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"2位移\"> （2）位移</span></h3>\n<ul>\n<li>\n<h4><span id=\"受击位移\"> 受击位移</span></h4>\n<p>通常受击位移在前 4 帧内不会有太大变化，目的是配合特效生命周期进行统一管理，防止出现特效播放位置和实际受击位置不匹配的问题。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><img src=\"/images/Emoji.gif\" data-original=\"image-20231019093225842.png\" alt=\"image-20231019093225842\" style=\"zoom:33%;\"></th>\n<th><img src=\"/images/Emoji.gif\" data-original=\"image-20231019093247344.png\" alt=\"image-20231019093247344\" style=\"zoom:33%;\"></th>\n<th><img src=\"/images/Emoji.gif\" data-original=\"image-20231019093621101.png\" alt=\"image-20231019093621101\" style=\"zoom:33%;\"></th>\n</tr>\n</thead>\n</table>\n<p>由于受击位移在前 4 帧内不会发生较大变化，所以在初速度算法上会有额外的补偿，例如：</p>\n<p>设理论初速度 v=10m/s</p>\n<p>则补偿后的初速度 v1=10/(0.167*5)≈12m/s</p>\n</li>\n</ul>\n<h3><span id=\"3特效\"> （3）特效</span></h3>\n<ul>\n<li>\n<p>攻击特效</p>\n<p>攻击特效需要匹配角色战斗性能，即特效需要符合角色动作，避免出现动作不匹配的问题</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"image-20231019094253154.png\" alt=\"image-20231019094253154\"></p>\n</li>\n<li>\n<p>受击特效</p>\n<p>受击特效按类别又可以分为一下几类</p>\n<ul>\n<li>\n<p>通用受击特效</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"/images/Emoji.gif\" data-original=\"%E8%A1%8C%E7%A7%8B.gif\" alt=\"行秋\"></th>\n<th><img src=\"/images/Emoji.gif\" data-original=\"%E5%8F%97%E5%87%BB%E7%89%B9%E6%95%88%E8%A1%8C%E7%A7%8B.png\" alt=\"受击特效行秋\"></th>\n</tr>\n</thead>\n</table>\n<p>此类型特效无需特殊的表现，都可以引用合适的受击特效，绝大多数近战和远程物理类型攻击可引用这些受击特效</p>\n</li>\n<li>\n<p>技能专用受击特效</p>\n<p>有时为了体现技能本身的特性，需要制作技能专用受击特效，可以弥补此类技能本身动作表现较弱的缺点</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"babara.gif\" alt=\"babara\"></p>\n</li>\n<li>\n<p>物体受击特效</p>\n<p>与技能受击特效不同，此类型的特效播放规则不依赖于攻击方的攻击方式，只取决于受击方的特性</p>\n<p>例如：</p>\n<ul>\n<li>\n<p>护盾受击</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E6%8A%A4%E7%9B%BE%E5%8F%97%E5%87%BB.gif\" alt=\"护盾受击\"></p>\n</li>\n<li>\n<p>场景受击</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E5%9C%BA%E6%99%AF%E5%8F%97%E5%87%BB.gif\" alt=\"场景受击\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>特效生命周期</p>\n<p>通常来说，一个特效的生命周期分为三个关键帧</p>\n<ul>\n<li>首帧表现：即特效的第一帧会达到总体的 80% 的表现</li>\n<li>最大形状帧数：在特效的第三帧会达到总体的 100%</li>\n<li>消散帧数：通常会在第 7-8 帧消散，视情况而定</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"/images/Emoji.gif\" data-original=\"image-20231019095930979.png\" alt=\"image-20231019095930979\"></th>\n<th><img src=\"/images/Emoji.gif\" data-original=\"image-20231019095947453.png\" alt=\"image-20231019095947453\"></th>\n<th><img src=\"/images/Emoji.gif\" data-original=\"image-20231019100003310.png\" alt=\"image-20231019100003310\"></th>\n</tr>\n</thead>\n</table>\n</li>\n<li>\n<p>顿帧</p>\n<p>顿帧是一把双刃剑，在不合理的时候出现的顿帧会破坏游戏的整体流畅性，仅适合用在大型怪物或一些需要特别表现的受击动作上。</p>\n</li>\n</ul>\n<h3><span id=\"4ui-和后处理\"> （4）UI 和后处理</span></h3>\n<ul>\n<li>\n<p>伤害显示</p>\n<p>通过伤害显示的方式体现是否命中是一种简单的处理方式。</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"apex.gif\" alt=\"apex\"></p>\n</li>\n<li>\n<p>血条震动</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E8%A1%80%E6%9D%A1%E9%9C%87%E5%8A%A8.gif\" alt=\"血条震动\"></p>\n</li>\n<li>\n<p>屏幕震动</p>\n<p>屏幕震动同样是一把双刃剑，仅仅适合用在蓄力、重武器的攻击前摇以及命中等情况下，适合搭配镜头运动等其他因素一起食用。</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E9%9C%87%E5%B1%8F%E5%B9%95.gif\" alt=\"震屏幕\" title=\"图片来源于网络\"></p>\n</li>\n<li>\n<p>风格化处理</p>\n<p>风格化后处理是一种能快速表现攻击和受击的方式，但需要注意避免后处理过多导致遮挡主要画面。</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E9%A3%8E%E6%A0%BC%E5%8C%96%E5%A4%84%E7%90%86.gif\" alt=\"风格化处理\"></p>\n</li>\n<li>\n<p>特写镜头</p>\n<p>特写镜头是一种影视化的处理方式，能带来较好的表现</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E9%95%9C%E5%A4%B4.gif\" alt=\"镜头\"></p>\n</li>\n</ul>\n<hr>\n<h2><span id=\"2-听觉因素\"> 2、听觉因素</span></h2>\n<h3><span id=\"1音效\"> （1）音效</span></h3>\n<p>音效设计总体上可以确认是以下流程：</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E9%9F%B3%E6%95%88%E8%AE%BE%E8%AE%A1.png\" alt=\"音效设计\"></p>\n<ul>\n<li>\n<p>近战受击音效</p>\n<p>近战音效的受击是多方面的因素共同影响的，通过多方面的因素产生音效融合来体现打击感</p>\n<ul>\n<li>受击材质\n<ul>\n<li>肉体</li>\n<li>金属</li>\n<li>甲壳</li>\n</ul>\n</li>\n<li>攻击力度\n<ul>\n<li>轻攻击</li>\n<li>重攻击</li>\n</ul>\n</li>\n<li>攻击锋利度\n<ul>\n<li>锐器</li>\n<li>钝器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>远程受击音效</p>\n<p>远程受击音效通常是较为单层的，受击材质部分占据了大部分的权重</p>\n<ul>\n<li>\n<p>受击材质</p>\n</li>\n<li>\n<p>子弹口径</p>\n</li>\n<li>\n<p>子弹射速</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2><span id=\"3-输入因素\"> 3、输入因素</span></h2>\n<h3><span id=\"1判定\"> （1）判定</span></h3>\n<ul>\n<li>\n<p>碰撞盒</p>\n<p>对于任何一款拥有战斗元素的游戏来说，攻击的命中判定都是不可或缺的因素</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E7%A2%B0%E6%92%9E%E5%92%8C.png\" alt=\"碰撞和\"></p>\n<p>通常碰撞盒可以分为以下几类：</p>\n<ul>\n<li>矩形（通常用于 2D 游戏）</li>\n<li>球体</li>\n<li>胶囊体</li>\n<li>BOX</li>\n</ul>\n<p>在 3d 游戏中较多的使用胶囊体作为 hitbox，主要原因是胶囊体在引擎进行碰撞计算的时候会消耗更少的性能。</p>\n</li>\n<li>\n<p>碰撞判定</p>\n<p>主要是针对碰撞盒在攻击过程中产生的连续碰撞问题，因为在引擎中，碰撞是连续存在的，在攻击命中后，对于是否需要连续进行命中判定，就需要对技能进行提前设计。</p>\n<p>在技能编辑器中需要设计此功能，即在攻击招式的判定帧内生效次数。</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"d5b82012-0436-452c-a88e-4b150cb08059.png\" alt=\"d5b82012-0436-452c-a88e-4b150cb08059\" title=\"图片来源于网络\"></p>\n</li>\n<li>\n<p>位置判定</p>\n<p>通常受击位置的判定需要考虑攻击碰撞盒同时命中多个受击碰撞盒的问题。此时需要设计正确的碰撞规则，才能保证受击方的动作和特效播放正确。</p>\n<p>可以使用向量判定方案：即记录从攻击碰撞盒到每个受击碰撞盒中心位置的向量，记为判定向量 DisToBox。同时记录攻击方向向量 disAttack，则取两者向量差值最小时的碰撞盒为实际受击位置。</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"image-20231019103815644.png\" alt=\"image-20231019103815644\"></p>\n</li>\n<li>\n<p><dic id=\"韧性机制\">动作判定</dic></p>\n<p>通常在 ARPG/ACT 游戏中会有一套韧性判定机制，当韧性小于 0 时才会播放重受击动画。</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"image-20231019104122855.png\" alt=\"image-20231019104122855\"></p>\n</li>\n</ul>\n<h3><span id=\"2动作取消\"> <dic id=\"动作取消\">（2）动作取消</dic></span></h3>\n<p>动作取消在动作游戏中是一个很重要的因素</p>\n<p>首先，减少了收尾，两个技能的连接可以使得动作更加的顺滑，其次，减少了破绽，因为在起手和收尾阶段往往更容易受到攻击和打断，而攻击时往往处于难以打断状态。再者，某一个动作可能有更多的后续动作，拓宽了动作选择，达到出其不意的效果，让战局更加的变幻莫测。</p>\n<p>并且在不同类型的游戏中取消会有不同的设定：</p>\n<ul>\n<li>\n<p>Moba 中一般可以在攻击的任何时候取消</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"35169915-3d23-436d-b3d8-8895e6043e22.gif\" alt=\"35169915-3d23-436d-b3d8-8895e6043e22\"></p>\n</li>\n<li>\n<p>RPG 来说只能取消部分的后摇收招 动作</p>\n<img src=\"/images/Emoji.gif\" data-original=\"优菈.gif\" alt=\"优菈\" style=\"zoom: 25%;\">\n</li>\n<li>\n<p>FTG 中需要操作的指令覆盖或者消耗资源来强制取消</p>\n</li>\n</ul>\n<hr>\n<h2><span id=\"4-触觉因素\"> 4、触觉因素</span></h2>\n<p>触觉因素是一个和硬件关联性很大的因素，通常在主机游戏中体现较为明显，也更容易做适配。</p>\n<h3><span id=\"1控制器震动\"> （1）控制器震动</span></h3>\n<p>通常来说在命中时给控制器一个震动指令，能带给玩家更直观的打击体验</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"FF16.gif\" alt=\"FF16\" title=\"FF16泰坦boss战\"></p>\n<h3><span id=\"2力反馈扳机\"> （2）力反馈扳机</span></h3>\n<p>在 dualsecse 控制器中新增的力反馈扳机搭配 ps5 平台的专门主机优化，在一系列射击游戏中能获得更优秀的感官体验。</p>\n<hr>\n<p>暂时就会这么多，想到了再更新</p>\n",
            "tags": [
                "战斗"
            ]
        },
        {
            "id": "https://zeroruby.github.io/2023/10/15/%E7%94%9F%E5%8C%96%E5%8D%B1%E6%9C%BA4%E9%87%8D%E5%88%B6%E7%89%88%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E5%88%86%E6%9E%90/",
            "url": "https://zeroruby.github.io/2023/10/15/%E7%94%9F%E5%8C%96%E5%8D%B1%E6%9C%BA4%E9%87%8D%E5%88%B6%E7%89%88%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E5%88%86%E6%9E%90/",
            "title": "生化危机4重制版关卡设计分析",
            "date_published": "2023-10-14T16:00:00.000Z",
            "content_html": "<p>一篇关于分析生化危机 4 重制版中的部分关卡是如何控制玩家行动并创造恐怖氛围的。</p>\n<span id=\"more\"></span>\n<hr>\n<h2><span id=\"一-关卡核心体验\"> 一、关卡核心体验</span></h2>\n<h3><span id=\"1-关卡主题\"> 1、关卡主题</span></h3>\n<p>游戏中的舞台是欧洲一个被茂密森林包围的封闭村庄。有传言说这个村庄内存在着一个怪异的邪教。在村庄内有城堡、检查站、湖泊、庄园、农场、村庄广场、镇厅、养鱼场、教堂、采石场和废弃工厂等地点。</p>\n<p>而在村庄广场这个关卡中，主要向玩家揭露了这个邪教地方的一角，玩家会首次见到大量的僵尸，需要玩家仔细探索，小心前进才能进入下一关卡。在短短几分钟内就将玩家投入到一个充满敌意和压迫感的环境中，让玩家在没有过多教学和提示的情况下，快速掌握游戏的基本操作和战斗规律。</p>\n<h3><span id=\"2-关卡体验\"> 2、关卡体验</span></h3>\n<p>村庄广场这个关卡属于新手关卡的一部分，通过村庄广场关卡后，才能解锁商人系统进行更深度的角色养成并解锁更多的玩法。</p>\n<p>对于一周目的玩家来说，这个关卡难度较高，对于玩家探索场景的要求较高，需要玩家尽可能的收集场景中的装备并熟悉和邪教徒的战斗；而在此关卡之前，主要属于让玩家熟悉操作的新手教程部分。</p>\n<p>所以本关卡给予玩家的游戏体验是：</p>\n<p>●希望玩家迅速熟悉游戏的玩法（利用资源击败邪教徒、发现场景中的资源和道具）；</p>\n<p>●让玩家迅速熟悉游戏难度和部分系统；</p>\n<p>●让玩家感受到游戏的整体恐怖氛围基调；</p>\n<p>●带给玩家紧张刺激的战斗体验。</p>\n<p>于是在这样的关卡设计基调上，所有的设计都是围绕着恐怖氛围感和紧张的战斗。</p>\n<p>3、关卡定位</p>\n<p>以战斗体验为核心驱动玩家进行箱庭探索的关卡。</p>\n<h2><span id=\"二-关卡玩法\"> 二、关卡玩法</span></h2>\n<h3><span id=\"1-关卡元件\"> 1、关卡元件</span></h3>\n<p>●<a href=\"https://www.bilibili.com/video/BV1DY4y1D7CX?t=516.6\">可破坏物</a><br>\n如木桶、箱子等，破坏这些物体可以获得物资，并且物资投放是有游戏中的动态难度系统（DAS）决定的，设计师无需考虑每个箱子投放什么物品。</p>\n<p>●普通小钥匙：<br>\n和主线流程无关，主要用途为收集品的收集</p>\n<p>●<a href=\"https://www.bilibili.com/video/BV1DY4y1D7CX?t=693.7\">邪教徒：</a><br>\n关卡的核心敌人，从对关卡结构的影响程度来看，分为不移动的怪物和巡逻型怪物。并且关卡核心玩法在被敌人发现前后从潜行式的探索玩法转变为战斗为核心的射击玩法。</p>\n<p>●<a href=\"https://www.bilibili.com/video/BV1DY4y1D7CX?t=254.5\">主线相关物品:</a><br>\n 与主线相关的道具，必须获得该道具才能进入下一箱庭，属于对关卡流程影响较大的\t物品。</p>\n<p>●场景交互道具：<br>\n○<a href=\"https://www.bilibili.com/video/BV1DY4y1D7CX?t=838.1\">门</a><br>\n○<a href=\"https://www.bilibili.com/video/BV1DY4y1D7CX?t=854.3\">书柜</a><br>\n○<a href=\"https://www.bilibili.com/video/BV1DY4y1D7CX?t=866.5\">梯子</a><br>\n○<a href=\"https://www.bilibili.com/video/BV1DY4y1D7CX?t=807.2\">牛棚</a></p>\n<h3><span id=\"2-关卡目标\"> 2、关卡目标</span></h3>\n<p>村庄广场的目标是与邪教徒战斗，击杀一定数量的敌人或在围攻中坚持 5 分钟，直到教堂钟声敲响。</p>\n<h3><span id=\"3-关卡难度感知\"> 3、关卡难度感知</span></h3>\n<p>在《生化危机 4 重制版》中采用了动态的难度系统，将根据玩家的表现水平、玩家的当前资源量进行评估，对接下来投放的资源进行调整。<br>\n通过动态难度系统，玩家在关卡中对难度的感知会始终保持在较高的水平。<br>\n以村庄广场为例分析该关卡的难度流曲线如图：<br>\n<img src=\"/images/Emoji.gif\" data-original=\"%E5%BF%83%E6%B5%81.png\" alt=\"这是图片\"></p>\n<h2><span id=\"三-关卡流程图\"> 三、关卡流程图</span></h2>\n<h3><span id=\"1-关卡流程解析\"> 1、关卡流程解析</span></h3>\n<p>在进入村庄广场关卡后，会有一个道路选择，而左边的道路带给玩家更多的安全感，所以一周目的玩家大部分会选择左边的道路。<br>\n<a href=\"https://www.bilibili.com/video/BV1DY4y1D7CX?t=713.8\">https://www.bilibili.com/video/BV1DY4y1D7CX?t=713.8</a></p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E6%B5%81%E7%A8%8B1.png\" alt=\"流程1\"></p>\n<p>这里主要分析正常流程。</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E6%B5%81%E7%A8%8B2.png\" alt=\"流程2\"></p>\n<p>在这个流程中，主要分为两个阶段：未被敌人发现的阶段 和 被敌人发现的阶段，两个阶段的关卡目标有所不同。<br>\n在未被发现的阶段中，玩家的行动区域较为固定，超过这个安全区域的地方会被敌人发现并进入战斗阶段。<br>\n在战斗阶段中，需要玩家充分利用场景物件与邪教徒战斗。并且场景中有许多关卡元件用于辅助玩家战斗。<br>\n流程回归：在关卡设计中可以通过多路线选择设计出不同的玩家动线，但是在生化危机 4 中，即使采用了多路径的设计，最终玩家都会回归到战斗流程中，即战斗流程为关卡核心</p>\n<h2><span id=\"四-关卡俯视图\"> 四、关卡俯视图</span></h2>\n<p>蓝线为玩家在未被发现时的行动路线，由于关卡目标需要经过战斗，所以所有的玩家动线最终都离不开战斗。</p>\n<p><img src=\"/images/Emoji.gif\" data-original=\"%E4%BF%AF%E8%A7%86%E5%9B%BE.png\" alt=\"俯视图\"></p>\n<h2><span id=\"五-关卡设计细节\"> 五、关卡设计细节</span></h2>\n<p>1、关卡引导<br>\n●难度引导：在进入关卡时，主路有大量邪教徒敌人，对于当前玩家缺少武器和弹药的情况下，直接进入战斗很明显会对玩家有较大的难度，因此引导玩家进入不会被敌人发现的右边的小路。</p>\n<p>●视觉引导：<br>\n关卡中有大量诸如窗户、楼梯等场景元件用于进行视觉引导，引导玩家进入房间或使\t用梯子进行探索或辅助战斗</p>\n<p>●奖励指引：<br>\n关卡中投放了许多能用于投放资源的可破坏物体，这些在战斗过程中一定程度的引导\t玩家的行动路线</p>\n<p>2、关于关卡是如何营造恐怖氛围感</p>\n<p>●视觉<br>\n游戏中无论是邪教徒诡异的行为还是环境中大量的刑具、断肢等等都是营造恐怖分为\t的重要因素</p>\n<p>●音效<br>\n游戏中邪教徒发出的声音让玩家身临其境的感知到邪教徒的诡异从而营造恐怖氛围感</p>\n<p>●战斗中的 AI 设计<br>\n在战斗过程中，关卡中的敌人会逐渐包围你，玩家必须迅速做出突围决定，如果玩家进入了小巷等狭窄空间时，会带来较强的刺激感和恐怖氛围。</p>\n<p>●高难度的关卡流程（核心）<br>\n游戏的关卡难度都较高，例如较少的弹药资源和医疗物品，因此较高的关卡难度也塑造了真实的恐怖氛围。<br>\n通过玩家的弱势地位和怪物的强势地位的差异营造出较强的恐怖氛围感。</p>\n<h2><span id=\"六-关卡流程视频\"> 六、关卡流程视频</span></h2>\n<p>1、正常流程<br>\n<a href=\"https://www.bilibili.com/video/BV1DY4y1D7CX?t=682.5\"> https://www.bilibili.com/video/BV1DY4y1D7CX?t=682.5</a></p>\n<p>2、速通流程<br>\n<a href=\"https://www.bilibili.com/video/BV1D84y1T7Nn/?spm_id_from=333.337.search-card.all.click\"> https://www.bilibili.com/video/BV1D84y1T7Nn/?spm_id_from=333.337.search-card.all.click</a></p>\n<p>3、手残流程<br>\n<a href=\"https://www.bilibili.com/video/BV1oP411d7Y2/?spm_id_from=333.337.search-card.all.click\"> https://www.bilibili.com/video/BV1oP411d7Y2/?spm_id_from=333.337.search-card.all.click</a></p>\n",
            "tags": [
                "关卡"
            ]
        }
    ]
}