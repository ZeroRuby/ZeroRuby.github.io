<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zeroruby.github.io</id>
    <title>红玉のblog</title>
    <link href="https://zeroruby.github.io" />
    <updated>2023-10-24T16:00:00.000Z</updated>
    <category term="程序" />
    <category term="unity" />
    <category term="战斗" />
    <category term="关卡" />
    <entry>
        <id>https://zeroruby.github.io/2023/10/25/Unity%E6%8F%92%E4%BB%B6%E5%88%B6%E4%BD%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
        <title>Unity插件制作学习笔记</title>
        <link rel="alternate" href="https://zeroruby.github.io/2023/10/25/Unity%E6%8F%92%E4%BB%B6%E5%88%B6%E4%BD%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
        <content type="html">&lt;p&gt;记录自己学习 unity 制作插件时的细节和 tips，有任何问题或疑惑请随时通过主页联系方式联系我一起探讨。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%B8%80-%E8%87%AA%E5%AE%9A%E4%B9%89inspector%E7%95%8C%E9%9D%A2&#34;&gt;一、自定义 Inspector 界面&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E5%B1%9E%E6%80%A7%E7%9B%B8%E5%85%B3%E6%A0%87%E8%AF%86&#34;&gt;1、属性相关标识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%95%8C%E9%9D%A2%E5%B1%9E%E6%80%A7&#34;&gt;2、自定义界面属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97%E5%8C%96%E5%B1%9E%E6%80%A7%E5%AD%97%E6%AE%B5&#34;&gt;3、自定义序列化属性字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%93%8D%E4%BD%9C%E7%95%8C%E9%9D%A2&#34;&gt;4、自定义操作界面&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#a-%E7%95%8C%E9%9D%A2%E7%9A%84%E5%90%AF%E5%8A%A8%E5%92%8C%E5%85%B3%E9%97%AD&#34;&gt;a、界面的启动和关闭&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#b-%E7%95%8C%E9%9D%A2%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%9B%B8%E5%85%B3&#34;&gt;b、界面的事件相关&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#c-%E6%96%87%E6%9C%AC%E9%A2%9C%E8%89%B2%E5%AD%97%E6%AE%B5&#34;&gt;c、文本 / 颜色字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#d-%E6%A0%87%E7%AD%BE%E5%AD%97%E6%AE%B5&#34;&gt;d、标签字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#e-%E8%BE%93%E5%85%A5%E5%AD%97%E6%AE%B5&#34;&gt;e、输入字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#f-%E6%BB%91%E5%8A%A8%E6%9D%A1&#34;&gt;f、滑动条&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#g-vector%E8%BE%93%E5%85%A5%E5%AD%97%E6%AE%B5&#34;&gt;g、Vector 输入字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#h-%E9%80%89%E6%8B%A9&#34;&gt;h、选择&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;hr&gt;
&lt;h1&gt;&lt;span id=&#34;一-自定义-inspector-界面&#34;&gt; 一、自定义 Inspector 界面&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span id=&#34;1-属性相关标识&#34;&gt; 1、属性相关标识&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;5 种变量在 inspector 隐藏和显示的方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using System;

public class Value : MonoBehaviour
&amp;#123;
    
    public int int1;  

    [HideInInspector]//直接隐藏在inspector  
    public int int2=3;  

    [NonSerialized]//隐藏的同时不会保存被inspector序列化后的值   
    public int int3=3;//即更改inspector的值不会影响脚本的初始赋值  

    [SerializeField]//将私有变量显示在inspector  
    private int int4;  

    public ValueTest valueTest = new ValueTest();  

&amp;#125;

[Serializable]//可让自定义的类显示在inspector  
public class ValueTest   
&amp;#123;
    public int int5;  
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最终在 inspector 的表现效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231025225218480.png&#34; alt=&#34;image-20231025225218480&#34;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;2-自定义界面属性&#34;&gt; 2、自定义界面属性&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;创建自定义界面需要在 Asset 路径下创建名为 Editor 的文件夹，此命名的文件夹打包时不会被打包（Resources 文件夹同理，在 load 方法加载资源时要注意路径&lt;a href=&#34;https://docs.unity.cn/cn/2019.3/ScriptReference/Resources.Load.html&#34;&gt;（Resources-Load - Unity 脚本 API）&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;创建上述 Value 的自定义 inspector：&lt;/p&gt;
&lt;p&gt;第一步：创建继承 Editor 基类的脚本，并将其放在 Editor 文件夹下，并声明是 Value 的界面&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

[CustomEditor(typeof(Value))]
public class ValueEditor :Editor
&amp;#123;
  
    public SerializedObject mObj;   //定义序列化目标对象
    //序列化出来几个属性
    //属性对应的是[CustomEditor(typeof(Value))]中，Value类里面的属性

    public SerializedProperty int1;
    public SerializedProperty int2;
    public SerializedProperty int3;
    public SerializedProperty int4;
    public SerializedProperty valueTest;

    //选择当前游戏对象
    private void OnEnable()
    &amp;#123;
        //初始化
        this.mObj = new SerializedObject(target);
        //通过字符串名字，查找Test1类里面的属性，并进行初始化
        this.int1 = this.mObj.FindProperty(&amp;quot;int1&amp;quot;);
        this.int2 = this.mObj.FindProperty(&amp;quot;int2&amp;quot;);
        this.int3 = this.mObj.FindProperty(&amp;quot;int3&amp;quot;);
        this.int4 = this.mObj.FindProperty(&amp;quot;int4&amp;quot;);
        this.valueTest = this.mObj.FindProperty(&amp;quot;valueTest&amp;quot;);
    &amp;#125;

    //绘制
    public override void OnInspectorGUI()
    &amp;#123;
        this.mObj.Update();

        EditorGUILayout.PropertyField(this.int1);
        EditorGUILayout.PropertyField(this.int2);
        //EditorGUILayout.PropertyField(this.int3);
        //因为int3是不被序列化的，所以这里不能写此语句
        EditorGUILayout.PropertyField(this.int4);
        EditorGUILayout.PropertyField(this.valueTest, true);
        //true属性意思是设置显示子节点，也就是显示TypeDemo里面的属性

        this.mObj.ApplyModifiedProperties();
        //应用属性修改
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231025232755437.png&#34; alt=&#34;image-20231025232755437&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到自定义的 Editor 界面不受类本身的属性表示控制。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;3-自定义序列化属性字段&#34;&gt; 3、自定义序列化属性字段&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;此时，我想要当前属性随着我的枚举值的变化而变化，即我选择一个枚举时，其他属性处于不被 editor 绘制的状态。&lt;/p&gt;
&lt;p&gt;方法：&lt;/p&gt;
&lt;p&gt;第一步，创建并书写对应类的脚本和编辑器脚本，这里分别命名为 EnumEditor 和 Enum。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using System;

public class Enum : MonoBehaviour
&amp;#123;
    public selectedEnum selectedEnum;
    public GameObject 碰撞盒;
    public GameObject 特效;
    public AnimationClip 动作;
&amp;#125;

[Serializable]
public enum selectedEnum
&amp;#123; 
碰撞盒,
特效,
动作,
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;仅有 Enum 时&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231025234839268.png&#34; alt=&#34;image-20231025234839268&#34;&gt;&lt;/p&gt;
&lt;p&gt;EnumEditor：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

[CustomEditor(typeof(Enum))]
public class EnumEditor : Editor
&amp;#123;
    public SerializedObject mObj;
    public SerializedProperty selectedEnum;
    public SerializedProperty 碰撞盒;
    public SerializedProperty 特效;
    public SerializedProperty 动作;

    private void OnEnable()
    &amp;#123;
        //初始化
        this.mObj = new SerializedObject(target);
        this.selectedEnum = this.mObj.FindProperty(&amp;quot;selectedEnum&amp;quot;);
        this.碰撞盒 = this.mObj.FindProperty(&amp;quot;碰撞盒&amp;quot;);
        this.特效 = this.mObj.FindProperty(&amp;quot;特效&amp;quot;);
        this.动作 = this.mObj.FindProperty(&amp;quot;动作&amp;quot;);
    &amp;#125;

    public override void OnInspectorGUI()
    &amp;#123;
        this.mObj.Update();
        EditorGUILayout.PropertyField(this.selectedEnum);
        //使用switch做条件筛选，this.mEnumDemo.enumValueIndex作为筛选条件，index从0开始，由于我设置枚举类型的第一个属性为None，所以case的值从1开始。
        switch (this.selectedEnum.enumValueIndex)
        &amp;#123;
            case 0:
                EditorGUILayout.PropertyField(this.碰撞盒);
                break;
            case 1:
                EditorGUILayout.PropertyField(this.特效);
                break;
            case 2:
                EditorGUILayout.PropertyField(this.动作);
                break;
        &amp;#125;

        this.mObj.ApplyModifiedProperties();
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编写后&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231025235035035.png&#34; alt=&#34;image-20231025235035035&#34;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;4-自定义操作界面&#34;&gt; 4、自定义操作界面&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;当我们需要自定义操作界面时：&lt;/p&gt;
&lt;p&gt;需要用到 EditorGUILayout 方法：&lt;a href=&#34;https://docs.unity.cn/cn/2019.4/ScriptReference/EditorGUILayout.html&#34;&gt;EditorGUILayout - Unity 脚本 API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下是常用的。&lt;/p&gt;
&lt;h3&gt;&lt;span id=&#34;a-界面的启动和关闭&#34;&gt; a、界面的启动和关闭&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;创建一个类，存放在 Assets–&amp;gt;Editor 里面，并继承自 EditorWindow&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
public class WindowsEditor : EditorWindow
&amp;#123;
    [MenuItem(&amp;quot;Menu/EditorWindow&amp;quot;)]
    //声明窗口路径

    public static void ShowWindow()
    &amp;#123;
        //CreateInstance会允许创建多个窗口，推荐使用系统自带的单例模式getwindows
        //使用官方提供的实例化窗口方法调用
        WindowsEditor.CreateInstance&amp;lt;WindowsEditor&amp;gt;().Show();

        //浮动型的窗口，跟点击Building Setting出现的窗口效果一样
        WindowsEditor.CreateInstance&amp;lt;WindowsEditor&amp;gt;().ShowUtility();

        //弹出窗口时的效果
        WindowsEditor.CreateInstance&amp;lt;WindowsEditor&amp;gt;().ShowPopup();
        //此方法和下面的OnGUI配合着使用，否则会出现页面关不掉的情况,此时不会出现UI自带的关闭界面

        //使用系统提供的单例模式，在unity面板中打开窗口时，只会出现一个(推荐)
        WindowsEditor.GetWindow&amp;lt;WindowsEditor&amp;gt;().Show();
    &amp;#125;

    public void OnGUI()
    &amp;#123;
        if (GUILayout.Button(&amp;quot;关闭&amp;quot;))
        &amp;#123;
            this.Close();
        &amp;#125;
    &amp;#125;
    
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;每个方法效果如下&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231026000101143.png&#34; alt=&#34;image-20231026000101143&#34;&gt;&lt;/th&gt;
&lt;th&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231026000129453.png&#34; alt=&#34;image-20231026000129453&#34;&gt;&lt;/th&gt;
&lt;th&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231026000158455.png&#34; alt=&#34;image-20231026000158455&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Show&lt;/td&gt;
&lt;td&gt;ShowUtility&lt;/td&gt;
&lt;td&gt;ShowPopup&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;span id=&#34;b-界面的事件相关&#34;&gt; b、界面的事件相关&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;自定义页面中有时会使用自定义的事件，事件通常如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    public int index_1 = 0;
    //刷新方法，每秒钟100次
    public void Update()
    &amp;#123;
        index_1++;
        Debug.Log(&amp;quot;index_1：&amp;quot; + index_1);
    &amp;#125;

    public int index_2 = 0;
    //刷新方法，刷新周期比Update小
    public void OnInspectorUpdate()
    &amp;#123;
        index_2++;
        Debug.Log(&amp;quot;index_2：&amp;quot; + index_2);
    &amp;#125;

    //视图被删除的时候触发
    public void OnDestroy()
    &amp;#123;
        Debug.Log(&amp;quot;OnDestroy：触发&amp;quot;);
    &amp;#125;

    //选择一个对象的时候触发
    public void OnSelectionChange()
    &amp;#123;
        //获取选择Hierarchy里面游戏物体的时候的名字
        for (int i = 0; i &amp;lt; Selection.gameObjects.Length; i++)
        &amp;#123;
            Debug.Log(&amp;quot;OnSelectionChange：触发&amp;quot; + Selection.gameObjects[i].name);
        &amp;#125;

        //获取选择Project里面的文件的名字
        for (int i = 0; i &amp;lt; Selection.objects.Length; i++)
        &amp;#123;
            Debug.Log(&amp;quot;OnSelectionChange：触发&amp;quot; + Selection.objects[i].name);
        &amp;#125;
    &amp;#125;

    //获得焦点的时候触发
    public void OnFocus()
    &amp;#123;
        Debug.Log(&amp;quot;OnFocus：触发&amp;quot;);
    &amp;#125;

    //失去焦点的时候触发
    public void OnLostFocus()
    &amp;#123;
        Debug.Log(&amp;quot;OnLostFocus：触发&amp;quot;);
    &amp;#125;

    //Hierarchy更改的时候触发
    public void OnHierarchyChange()
    &amp;#123;
        Debug.Log(&amp;quot;OnHierarchyChange：触发&amp;quot;);
    &amp;#125;

    //Project更改的时候触发
    public void OnProjectChange()
    &amp;#123;
        Debug.Log(&amp;quot;OnProjectChange：触发&amp;quot;);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;span id=&#34;c-文本-颜色字段&#34;&gt; c、文本 / 颜色字段&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;
    public string 文本 = &amp;quot;默认文字&amp;quot;;
    public Color 颜色 = Color.white;
    public void OnGUI()
    &amp;#123;
        if (GUILayout.Button(&amp;quot;关闭&amp;quot;))
        &amp;#123;
            this.Close();
        &amp;#125;
        //一行文本，单行输入框
        this.文本 = EditorGUILayout.TextField(this.文本);
        //多行输入框
        this.文本 = EditorGUILayout.TextArea(this.文本);
        //密码输入框
        this.文本 = EditorGUILayout.PasswordField(this.文本);
        //颜色选择框
        this.颜色 = EditorGUILayout.ColorField(this.颜色);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231026001735821.png&#34; alt=&#34;image-20231026001735821&#34;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span id=&#34;d-标签字段&#34;&gt; d、标签字段&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;类似于 [header (“”)] 标识，在 gui 中显示 tag。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    public string 文本 = &amp;quot;默认文字&amp;quot;;
    public Color 颜色 = Color.white;
	public void OnGUI()
    &amp;#123;
        //标签
        EditorGUILayout.PrefixLabel(this.文本);//只写这么一行代码，窗口里面不出现任何内容
        EditorGUILayout.Space();//换行

        //标签（下拉框）
        this.文本 = EditorGUILayout.TagField(this.文本);
        EditorGUILayout.Space();

        //标签（非可选择标签提示）
        EditorGUILayout.LabelField(this.文本);
        EditorGUILayout.Space();

        //标签（可选择标签提示）
        EditorGUILayout.SelectableLabel(this.文本);
        EditorGUILayout.Space();
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231026002300584.png&#34; alt=&#34;image-20231026002300584&#34;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span id=&#34;e-输入字段&#34;&gt; e、输入字段&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;   public string 文本 = &amp;quot;默认文字&amp;quot;;
    public int 数字;

    public void OnGUI()
    &amp;#123;
        EditorGUILayout.LabelField(&amp;quot;输入整形数字&amp;quot;);
        this.数字 = EditorGUILayout.IntField(this.数字);
        EditorGUILayout.LabelField(&amp;quot;输入字符&amp;quot;);
        this.文本 = EditorGUILayout.TextField(this.文本);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231026002601592.png&#34; alt=&#34;image-20231026002601592&#34;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span id=&#34;f-滑动条&#34;&gt; f、滑动条&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    public int 数字;
    public float 浮点数;
    public float 浮点最大值;
    public float 浮点最小值;
    public void OnGUI()
    &amp;#123;
        //滑动条  参数1：默认值，参数2：最小值，参数3：最大值
        this.浮点数 = EditorGUILayout.Slider(this.浮点数, 0, 100);//取值区间有小数

        this.数字 = EditorGUILayout.IntSlider(this.数字, 0, 100);//取值区间为整数

        //最小值到最大值的取值范围，为0-100
        EditorGUILayout.MinMaxSlider(ref 浮点最小值, ref 浮点最大值, 0, 100);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231026003117435.png&#34; alt=&#34;image-20231026003117435&#34;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span id=&#34;g-vector-输入字段&#34;&gt; g、Vector 输入字段&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    public Vector3 mPos3;
    public void OnGUI()
    &amp;#123;
        this.mPos3 = EditorGUILayout.Vector3Field(&amp;quot;三维坐标&amp;quot;, this.mPos3);
        EditorGUILayout.Space();
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231026003443557.png&#34; alt=&#34;image-20231026003443557&#34;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span id=&#34;h-选择&#34;&gt; h、选择&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public int index;
public void OnGUI()
    &amp;#123;        
    	string[] strs = &amp;#123; &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot; ,&amp;quot;e&amp;quot;&amp;#125;;
        int[] ints = &amp;#123; 1, 2, 3, 4, 5 &amp;#125;;
        this.index = EditorGUILayout.Popup(this.index, strs);
        this.index = EditorGUILayout.IntPopup(this.index, strs,ints);
        EditorGUILayout.Space();
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231026004155844.png&#34; alt=&#34;image-20231026004155844&#34;&gt;&lt;/p&gt;
&lt;p&gt;i、对象选择&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    public string mTag;
    public int mLayer;
    public Object mObject;
    public void OnGUI()
    &amp;#123;
        //标签，下面两种写法，哪个都可以
        //this.mTag = EditorGUILayout.TagField(this.mTag);
        this.mTag = EditorGUILayout.TagField(&amp;quot;Tag&amp;quot;);
        EditorGUILayout.Space();
        //层
         this.mLayer = EditorGUILayout.LayerField(this.mLayer);
         EditorGUILayout.Space();
         //对象选择，如果想要存放所有的元素，那么参数就写为Object： typeof(Object)
        this.mObject = EditorGUILayout.ObjectField(&amp;quot;对象选择器&amp;quot;, this.mObject, typeof(Camera), true);
   &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;从其他博客中学到的，原作者：&lt;a href=&#34;https://www.cnblogs.com/yzx885059439/p/14497026.html&#34;&gt;Unity3D 插件开发教程 - 挽风入我怀 - 博客园 (cnblogs.com)&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="程序" />
        <category term="unity" />
        <updated>2023-10-24T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://zeroruby.github.io/2023/10/19/%E6%89%93%E5%87%BB%E6%84%9F%E4%BC%98%E5%8C%96%E8%AE%BE%E8%AE%A1/</id>
        <title>打击感和战斗手感优化设计</title>
        <link rel="alternate" href="https://zeroruby.github.io/2023/10/19/%E6%89%93%E5%87%BB%E6%84%9F%E4%BC%98%E5%8C%96%E8%AE%BE%E8%AE%A1/"/>
        <content type="html">&lt;p&gt;一篇关于如何进行打击感和战斗手感优化的文章&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%B8%80-%E5%89%8D%E8%A8%80&#34;&gt;一、前言&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BC%98%E5%8C%96%E6%89%93%E5%87%BB%E6%84%9F&#34;&gt;1、为什么要优化打击感&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E4%BB%80%E4%B9%88%E6%98%AF%E4%BC%98%E7%A7%80%E7%9A%84%E6%88%98%E6%96%97%E6%89%8B%E6%84%9F&#34;&gt;2、什么是优秀的战斗手感&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%E4%BB%80%E4%B9%88%E6%98%AF%E4%BC%98%E7%A7%80%E7%9A%84%E6%88%98%E6%96%97%E6%89%8B%E6%84%9F&#34;&gt;3、什么是优秀的战斗手感&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%BA%8C-%E6%89%93%E5%87%BB%E6%84%9F%E5%92%8C%E6%89%8B%E6%84%9F%E7%9A%84%E5%BD%B1%E5%93%8D%E5%9B%A0%E7%B4%A0&#34;&gt;二、打击感和手感的影响因素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%B8%89-%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E6%89%93%E5%87%BB%E6%84%9F&#34;&gt;三、如何优化打击感&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E8%A7%86%E8%A7%89%E5%9B%A0%E7%B4%A0&#34;&gt;1、视觉因素&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1%E5%8A%A8%E4%BD%9C&#34;&gt;（1）动作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2%E4%BD%8D%E7%A7%BB&#34;&gt;（2）位移&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3%E7%89%B9%E6%95%88&#34;&gt;（3）特效&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4ui%E5%92%8C%E5%90%8E%E5%A4%84%E7%90%86&#34;&gt;（4）UI 和后处理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E5%90%AC%E8%A7%89%E5%9B%A0%E7%B4%A0&#34;&gt;2、听觉因素&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1%E9%9F%B3%E6%95%88&#34;&gt;（1）音效&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%E8%BE%93%E5%85%A5%E5%9B%A0%E7%B4%A0&#34;&gt;3、输入因素&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1%E5%88%A4%E5%AE%9A&#34;&gt;（1）判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dic-id%E5%8A%A8%E4%BD%9C%E5%8F%96%E6%B6%882%E5%8A%A8%E4%BD%9C%E5%8F%96%E6%B6%88div&#34;&gt;&lt;dic id=&#34;动作取消&#34;&gt;（2）动作取消&lt;/dic&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%E8%A7%A6%E8%A7%89%E5%9B%A0%E7%B4%A0&#34;&gt;4、触觉因素&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1%E6%8E%A7%E5%88%B6%E5%99%A8%E9%9C%87%E5%8A%A8&#34;&gt;（1）控制器震动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2%E5%8A%9B%E5%8F%8D%E9%A6%88%E6%89%B3%E6%9C%BA&#34;&gt;（2）力反馈扳机&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;hr&gt;
&lt;h1&gt;&lt;span id=&#34;一-前言&#34;&gt; 一、前言&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span id=&#34;1-为什么要优化打击感&#34;&gt; 1、为什么要优化打击感&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;打击感对于任何一个拥有动作元素的游戏来说都是不可或缺的。通常来说，打击感优化会是动作游戏中一个较为核心的模块，也是一个难以做好的模块。&lt;/p&gt;
&lt;p&gt;但是打击感的提升对于游戏品质、玩家体感方面的提升都是巨大的，所以对于一款以战斗为核心的游戏而言，打击感的优化是比较重要的。&lt;/p&gt;
&lt;p&gt;另外，此处需要感谢&lt;a href=&#34;https://space.bilibili.com/27429148?spm_id_from=333.999.0.0&#34;&gt;哲哥&lt;/a&gt;的内容分享&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;2-什么是优秀的战斗手感&#34;&gt; 2、什么是优秀的战斗手感&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;战斗手感和打击感需要围绕三个重要因素进行设计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;顺&lt;/strong&gt;：优秀的动作操作体验应当非常顺滑，按下按钮立刻有所对应反应，做到所控即所得。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;准&lt;/strong&gt;：只有当命中反馈尽量精准时，才能让玩家信任游戏的操控体验，做到人机交互的统一。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;爽&lt;/strong&gt;：战斗节奏需要从压抑到释放的节奏变化，通过动作与各类视效、镜头和的联动达到对感官的本能冲击。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span id=&#34;3-什么是优秀的战斗手感&#34;&gt; 3、什么是优秀的战斗手感&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;干脆利落&lt;/li&gt;
&lt;li&gt;攻击意图明确&lt;/li&gt;
&lt;li&gt;攻守双方协调统一&lt;/li&gt;
&lt;li&gt;动特音一体化&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;span id=&#34;二-打击感和手感的影响因素&#34;&gt; 二、打击感和手感的影响因素&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E5%BD%B1%E5%93%8D%E5%9B%A0%E7%B4%A0.png&#34; alt=&#34;影响因素&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过人的感知对打击感区分了四个方向的影响因素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视觉：
&lt;ul&gt;
&lt;li&gt;动作&lt;/li&gt;
&lt;li&gt;位移&lt;/li&gt;
&lt;li&gt;特效&lt;/li&gt;
&lt;li&gt;UI&lt;/li&gt;
&lt;li&gt;后处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;听觉
&lt;ul&gt;
&lt;li&gt;音效&lt;/li&gt;
&lt;li&gt;背景音乐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;输入
&lt;ul&gt;
&lt;li&gt;动作取消&lt;/li&gt;
&lt;li&gt;受击判定&lt;/li&gt;
&lt;li&gt;指令输入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;触觉
&lt;ul&gt;
&lt;li&gt;控制器震动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;span id=&#34;三-如何优化打击感&#34;&gt; 三、如何优化打击感&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span id=&#34;1-视觉因素&#34;&gt; 1、视觉因素&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id=&#34;1动作&#34;&gt; （1）动作&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;&lt;span id=&#34;攻击动作&#34;&gt; 攻击动作&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;符合发力原理&lt;/p&gt;
&lt;p&gt;对于任何一个动作设计而言，其基本都需要符合发力原理。&lt;/p&gt;
&lt;p&gt;以人形骨骼为例，通常以腿→腰胯→肩手头的发力顺序来保证动作看起来顺畅。&lt;/p&gt;
&lt;p&gt;参考武打港片中（如：叶问系列）的打戏镜头，可以看出发力要符合人体结构才能看起来真实&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E5%8F%B6%E9%97%AE%E5%86%B2%E6%8B%B3.gif&#34; alt=&#34;叶问冲拳&#34; title=&#34;叶问 日字冲拳&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;符合攻击意图&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;蓄力→释放&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E6%99%AE%E9%80%9A%E5%8A%A8%E4%BD%9C.gif&#34; alt=&#34;普通动作&#34;&gt;&lt;/p&gt;
&lt;p&gt;​					这是一个没有任何蓄力的动作设计 &lt;strong&gt;↑&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E8%93%84%E5%8A%9B%E5%8A%A8%E4%BD%9C.gif&#34; alt=&#34;蓄力动作&#34;&gt;&lt;/p&gt;
&lt;p&gt;​					这是添加了蓄力动作的设计 &lt;strong&gt;↑&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​					由此可见一个有节奏的动作设计需要在每帧内的速度各不相同，如果动画同学在进行动作设计的同时没有注意这					点，很有可能导致最后动作设计缺少打击感。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;需要有后摇缓冲&lt;/p&gt;
&lt;p&gt;对于一个攻击动作而言，无论其是否能被取消（&lt;a href=&#34;#动作取消&#34;&gt;动作取消&lt;/a&gt;），都需要设计其攻击判定结束后的收招动作，是确保动作的连贯性和演出性质的重要因素。同时搭配动作取消，能成为影响操作手感的重要因素。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E5%8E%9F%E7%A5%9E%E6%94%B6%E5%89%91.gif&#34; alt=&#34;原神收剑&#34; title=&#34;原神迪卢克收剑动作&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;&lt;span id=&#34;受击-动作&#34;&gt; 受击 动作&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;夸张化处理&lt;/p&gt;
&lt;p&gt;对于 videogame 而言，通常由于缺少大银幕、运镜、对焦等拍摄手法，其表现力通常不如影视作品，所以在游戏中的动作设计通常会比影视作品中更加夸张化处理一点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一帧切原则&lt;/p&gt;
&lt;p&gt;通常动作游戏的打击感强调爽快、精准和迅速的反馈，所以当角色受到攻击后，需要参考一帧切原则进行受击动画的播放。即：角色从当前动作过度到受击动作的播放只能使用一帧的过度时间&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E4%B8%80%E5%B8%A7%E5%88%87%E5%8E%9F%E5%88%99.gif&#34; alt=&#34;一帧切原则&#34; title=&#34;一帧切原则&#34;&gt;&lt;/p&gt;
&lt;p&gt;而在以强调真实感的拟真游戏当中，动作设计以真实感为核心，所以此时无需参考一帧切原则，可以使用较长的过渡动画。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E5%88%87%E6%9E%AA%E5%A1%94%E7%A7%91%E5%A4%AB.gif&#34; alt=&#34;切枪塔科夫&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分档合理&lt;/p&gt;
&lt;p&gt;在 ARPG/ACT 游戏中，受击动作会根据规则进行分档&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;融合受击：不会打断角色当前的动作，通过动画遮罩实现受击动作和当前动作的融合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大 / 小受击：此类型受击会打断角色当前动作，通过一帧切播放受击动画来打断角色当前动作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;击飞受击：角色受到重受击后，自身产生击飞类型的受击位移。&lt;/p&gt;
&lt;p&gt;通常重受击会投放在连段中的最后一段，符合战斗从压抑到释放的节奏，如果将重攻击投放在普攻中间，会导致连段无法连上，破坏玩家战斗节奏&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动画融合&lt;/p&gt;
&lt;p&gt;以 unity 为例用动画层（layers）和动画遮罩（avatar mask）实现动画融合，可以提高受击动作流畅性&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231019084938968.png&#34; alt=&#34;image-20231019084938968&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过在 unity 中新建新的动画 layer，在播放受击动画依照动画层级和权重进行动作播放&lt;/p&gt;
&lt;p&gt;例如：当角色的上半身碰撞盒受击时，Body 层的动作播放受击动作权重为 100%，而下半身通过播放权重 20%，通过 IK 实现动画的连贯性，避免出现上半身受击，而下半身动作很大的错误案例&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E4%B8%80%E5%B8%A7%E5%88%87%E5%8E%9F%E5%88%99.gif&#34; alt=&#34;一帧切原则&#34;&gt;&lt;/p&gt;
&lt;p&gt;以同样的例子可以看出，在街霸 6 中的实现就是如此，当角色上半身受击时、下半身动作幅度并不大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;体型衰减&lt;/p&gt;
&lt;p&gt;如果在游戏中都是人形 avatar 且体型相差不大的情况下可以不使用体型衰减（如 FTG），但对于出现体型不同的怪物，例如当正常体型的人形角色攻击大体型怪物时，会需要有相应的受击衰减，可通过&lt;a href=&#34;#韧性机制&#34;&gt; 韧性机制&lt;/a&gt;进行受击判定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;受身动作&lt;/p&gt;
&lt;p&gt;当角色受到大幅度受击动作后，通常应该有一个受身动作，其节奏随游戏不同略有不同，在格斗游戏中，角色受击后的起身应该保持尽可能相同的帧数，确保玩家在面对不同角色的时候的战斗节奏不会发生太大的变化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E5%AE%88%E8%BA%AB%E5%8A%A8%E4%BD%9C.gif&#34; alt=&#34;守身动作&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;span id=&#34;2位移&#34;&gt; （2）位移&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;&lt;span id=&#34;受击位移&#34;&gt; 受击位移&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;通常受击位移在前 4 帧内不会有太大变化，目的是配合特效生命周期进行统一管理，防止出现特效播放位置和实际受击位置不匹配的问题。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231019093225842.png&#34; alt=&#34;image-20231019093225842&#34; style=&#34;zoom:33%;&#34;&gt;&lt;/th&gt;
&lt;th&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231019093247344.png&#34; alt=&#34;image-20231019093247344&#34; style=&#34;zoom:33%;&#34;&gt;&lt;/th&gt;
&lt;th&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231019093621101.png&#34; alt=&#34;image-20231019093621101&#34; style=&#34;zoom:33%;&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;由于受击位移在前 4 帧内不会发生较大变化，所以在初速度算法上会有额外的补偿，例如：&lt;/p&gt;
&lt;p&gt;设理论初速度 v=10m/s&lt;/p&gt;
&lt;p&gt;则补偿后的初速度 v1=10/(0.167*5)≈12m/s&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;span id=&#34;3特效&#34;&gt; （3）特效&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;攻击特效&lt;/p&gt;
&lt;p&gt;攻击特效需要匹配角色战斗性能，即特效需要符合角色动作，避免出现动作不匹配的问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231019094253154.png&#34; alt=&#34;image-20231019094253154&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;受击特效&lt;/p&gt;
&lt;p&gt;受击特效按类别又可以分为一下几类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通用受击特效&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E8%A1%8C%E7%A7%8B.gif&#34; alt=&#34;行秋&#34;&gt;&lt;/th&gt;
&lt;th&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E5%8F%97%E5%87%BB%E7%89%B9%E6%95%88%E8%A1%8C%E7%A7%8B.png&#34; alt=&#34;受击特效行秋&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;此类型特效无需特殊的表现，都可以引用合适的受击特效，绝大多数近战和远程物理类型攻击可引用这些受击特效&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;技能专用受击特效&lt;/p&gt;
&lt;p&gt;有时为了体现技能本身的特性，需要制作技能专用受击特效，可以弥补此类技能本身动作表现较弱的缺点&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;babara.gif&#34; alt=&#34;babara&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物体受击特效&lt;/p&gt;
&lt;p&gt;与技能受击特效不同，此类型的特效播放规则不依赖于攻击方的攻击方式，只取决于受击方的特性&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;护盾受击&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E6%8A%A4%E7%9B%BE%E5%8F%97%E5%87%BB.gif&#34; alt=&#34;护盾受击&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;场景受击&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E5%9C%BA%E6%99%AF%E5%8F%97%E5%87%BB.gif&#34; alt=&#34;场景受击&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特效生命周期&lt;/p&gt;
&lt;p&gt;通常来说，一个特效的生命周期分为三个关键帧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首帧表现：即特效的第一帧会达到总体的 80% 的表现&lt;/li&gt;
&lt;li&gt;最大形状帧数：在特效的第三帧会达到总体的 100%&lt;/li&gt;
&lt;li&gt;消散帧数：通常会在第 7-8 帧消散，视情况而定&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231019095930979.png&#34; alt=&#34;image-20231019095930979&#34;&gt;&lt;/th&gt;
&lt;th&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231019095947453.png&#34; alt=&#34;image-20231019095947453&#34;&gt;&lt;/th&gt;
&lt;th&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231019100003310.png&#34; alt=&#34;image-20231019100003310&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;顿帧&lt;/p&gt;
&lt;p&gt;顿帧是一把双刃剑，在不合理的时候出现的顿帧会破坏游戏的整体流畅性，仅适合用在大型怪物或一些需要特别表现的受击动作上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;span id=&#34;4ui-和后处理&#34;&gt; （4）UI 和后处理&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;伤害显示&lt;/p&gt;
&lt;p&gt;通过伤害显示的方式体现是否命中是一种简单的处理方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;apex.gif&#34; alt=&#34;apex&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;血条震动&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E8%A1%80%E6%9D%A1%E9%9C%87%E5%8A%A8.gif&#34; alt=&#34;血条震动&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;屏幕震动&lt;/p&gt;
&lt;p&gt;屏幕震动同样是一把双刃剑，仅仅适合用在蓄力、重武器的攻击前摇以及命中等情况下，适合搭配镜头运动等其他因素一起食用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E9%9C%87%E5%B1%8F%E5%B9%95.gif&#34; alt=&#34;震屏幕&#34; title=&#34;图片来源于网络&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;风格化处理&lt;/p&gt;
&lt;p&gt;风格化后处理是一种能快速表现攻击和受击的方式，但需要注意避免后处理过多导致遮挡主要画面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E9%A3%8E%E6%A0%BC%E5%8C%96%E5%A4%84%E7%90%86.gif&#34; alt=&#34;风格化处理&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特写镜头&lt;/p&gt;
&lt;p&gt;特写镜头是一种影视化的处理方式，能带来较好的表现&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E9%95%9C%E5%A4%B4.gif&#34; alt=&#34;镜头&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;span id=&#34;2-听觉因素&#34;&gt; 2、听觉因素&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id=&#34;1音效&#34;&gt; （1）音效&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;音效设计总体上可以确认是以下流程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E9%9F%B3%E6%95%88%E8%AE%BE%E8%AE%A1.png&#34; alt=&#34;音效设计&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;近战受击音效&lt;/p&gt;
&lt;p&gt;近战音效的受击是多方面的因素共同影响的，通过多方面的因素产生音效融合来体现打击感&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;受击材质
&lt;ul&gt;
&lt;li&gt;肉体&lt;/li&gt;
&lt;li&gt;金属&lt;/li&gt;
&lt;li&gt;甲壳&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;攻击力度
&lt;ul&gt;
&lt;li&gt;轻攻击&lt;/li&gt;
&lt;li&gt;重攻击&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;攻击锋利度
&lt;ul&gt;
&lt;li&gt;锐器&lt;/li&gt;
&lt;li&gt;钝器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;远程受击音效&lt;/p&gt;
&lt;p&gt;远程受击音效通常是较为单层的，受击材质部分占据了大部分的权重&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;受击材质&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子弹口径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子弹射速&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;span id=&#34;3-输入因素&#34;&gt; 3、输入因素&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id=&#34;1判定&#34;&gt; （1）判定&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;碰撞盒&lt;/p&gt;
&lt;p&gt;对于任何一款拥有战斗元素的游戏来说，攻击的命中判定都是不可或缺的因素&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E7%A2%B0%E6%92%9E%E5%92%8C.png&#34; alt=&#34;碰撞和&#34;&gt;&lt;/p&gt;
&lt;p&gt;通常碰撞盒可以分为以下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;矩形（通常用于 2D 游戏）&lt;/li&gt;
&lt;li&gt;球体&lt;/li&gt;
&lt;li&gt;胶囊体&lt;/li&gt;
&lt;li&gt;BOX&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 3d 游戏中较多的使用胶囊体作为 hitbox，主要原因是胶囊体在引擎进行碰撞计算的时候会消耗更少的性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;碰撞判定&lt;/p&gt;
&lt;p&gt;主要是针对碰撞盒在攻击过程中产生的连续碰撞问题，因为在引擎中，碰撞是连续存在的，在攻击命中后，对于是否需要连续进行命中判定，就需要对技能进行提前设计。&lt;/p&gt;
&lt;p&gt;在技能编辑器中需要设计此功能，即在攻击招式的判定帧内生效次数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;d5b82012-0436-452c-a88e-4b150cb08059.png&#34; alt=&#34;d5b82012-0436-452c-a88e-4b150cb08059&#34; title=&#34;图片来源于网络&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;位置判定&lt;/p&gt;
&lt;p&gt;通常受击位置的判定需要考虑攻击碰撞盒同时命中多个受击碰撞盒的问题。此时需要设计正确的碰撞规则，才能保证受击方的动作和特效播放正确。&lt;/p&gt;
&lt;p&gt;可以使用向量判定方案：即记录从攻击碰撞盒到每个受击碰撞盒中心位置的向量，记为判定向量 DisToBox。同时记录攻击方向向量 disAttack，则取两者向量差值最小时的碰撞盒为实际受击位置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231019103815644.png&#34; alt=&#34;image-20231019103815644&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;dic id=&#34;韧性机制&#34;&gt;动作判定&lt;/dic&gt;&lt;/p&gt;
&lt;p&gt;通常在 ARPG/ACT 游戏中会有一套韧性判定机制，当韧性小于 0 时才会播放重受击动画。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;image-20231019104122855.png&#34; alt=&#34;image-20231019104122855&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;span id=&#34;2动作取消&#34;&gt; &lt;dic id=&#34;动作取消&#34;&gt;（2）动作取消&lt;/dic&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;动作取消在动作游戏中是一个很重要的因素&lt;/p&gt;
&lt;p&gt;首先，减少了收尾，两个技能的连接可以使得动作更加的顺滑，其次，减少了破绽，因为在起手和收尾阶段往往更容易受到攻击和打断，而攻击时往往处于难以打断状态。再者，某一个动作可能有更多的后续动作，拓宽了动作选择，达到出其不意的效果，让战局更加的变幻莫测。&lt;/p&gt;
&lt;p&gt;并且在不同类型的游戏中取消会有不同的设定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Moba 中一般可以在攻击的任何时候取消&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;35169915-3d23-436d-b3d8-8895e6043e22.gif&#34; alt=&#34;35169915-3d23-436d-b3d8-8895e6043e22&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RPG 来说只能取消部分的后摇收招 动作&lt;/p&gt;
&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;优菈.gif&#34; alt=&#34;优菈&#34; style=&#34;zoom: 25%;&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FTG 中需要操作的指令覆盖或者消耗资源来强制取消&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;span id=&#34;4-触觉因素&#34;&gt; 4、触觉因素&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;触觉因素是一个和硬件关联性很大的因素，通常在主机游戏中体现较为明显，也更容易做适配。&lt;/p&gt;
&lt;h3&gt;&lt;span id=&#34;1控制器震动&#34;&gt; （1）控制器震动&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;通常来说在命中时给控制器一个震动指令，能带给玩家更直观的打击体验&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;FF16.gif&#34; alt=&#34;FF16&#34; title=&#34;FF16泰坦boss战&#34;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span id=&#34;2力反馈扳机&#34;&gt; （2）力反馈扳机&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在 dualsecse 控制器中新增的力反馈扳机搭配 ps5 平台的专门主机优化，在一系列射击游戏中能获得更优秀的感官体验。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;暂时就会这么多，想到了再更新&lt;/p&gt;
</content>
        <category term="战斗" />
        <updated>2023-10-18T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://zeroruby.github.io/2023/10/15/%E7%94%9F%E5%8C%96%E5%8D%B1%E6%9C%BA4%E9%87%8D%E5%88%B6%E7%89%88%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E5%88%86%E6%9E%90/</id>
        <title>生化危机4重制版关卡设计分析</title>
        <link rel="alternate" href="https://zeroruby.github.io/2023/10/15/%E7%94%9F%E5%8C%96%E5%8D%B1%E6%9C%BA4%E9%87%8D%E5%88%B6%E7%89%88%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E5%88%86%E6%9E%90/"/>
        <content type="html">&lt;p&gt;一篇关于分析生化危机 4 重制版中的部分关卡是如何控制玩家行动并创造恐怖氛围的。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;span id=&#34;一-关卡核心体验&#34;&gt; 一、关卡核心体验&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id=&#34;1-关卡主题&#34;&gt; 1、关卡主题&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;游戏中的舞台是欧洲一个被茂密森林包围的封闭村庄。有传言说这个村庄内存在着一个怪异的邪教。在村庄内有城堡、检查站、湖泊、庄园、农场、村庄广场、镇厅、养鱼场、教堂、采石场和废弃工厂等地点。&lt;/p&gt;
&lt;p&gt;而在村庄广场这个关卡中，主要向玩家揭露了这个邪教地方的一角，玩家会首次见到大量的僵尸，需要玩家仔细探索，小心前进才能进入下一关卡。在短短几分钟内就将玩家投入到一个充满敌意和压迫感的环境中，让玩家在没有过多教学和提示的情况下，快速掌握游戏的基本操作和战斗规律。&lt;/p&gt;
&lt;h3&gt;&lt;span id=&#34;2-关卡体验&#34;&gt; 2、关卡体验&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;村庄广场这个关卡属于新手关卡的一部分，通过村庄广场关卡后，才能解锁商人系统进行更深度的角色养成并解锁更多的玩法。&lt;/p&gt;
&lt;p&gt;对于一周目的玩家来说，这个关卡难度较高，对于玩家探索场景的要求较高，需要玩家尽可能的收集场景中的装备并熟悉和邪教徒的战斗；而在此关卡之前，主要属于让玩家熟悉操作的新手教程部分。&lt;/p&gt;
&lt;p&gt;所以本关卡给予玩家的游戏体验是：&lt;/p&gt;
&lt;p&gt;●希望玩家迅速熟悉游戏的玩法（利用资源击败邪教徒、发现场景中的资源和道具）；&lt;/p&gt;
&lt;p&gt;●让玩家迅速熟悉游戏难度和部分系统；&lt;/p&gt;
&lt;p&gt;●让玩家感受到游戏的整体恐怖氛围基调；&lt;/p&gt;
&lt;p&gt;●带给玩家紧张刺激的战斗体验。&lt;/p&gt;
&lt;p&gt;于是在这样的关卡设计基调上，所有的设计都是围绕着恐怖氛围感和紧张的战斗。&lt;/p&gt;
&lt;p&gt;3、关卡定位&lt;/p&gt;
&lt;p&gt;以战斗体验为核心驱动玩家进行箱庭探索的关卡。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;二-关卡玩法&#34;&gt; 二、关卡玩法&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id=&#34;1-关卡元件&#34;&gt; 1、关卡元件&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;●&lt;a href=&#34;https://www.bilibili.com/video/BV1DY4y1D7CX?t=516.6&#34;&gt;可破坏物&lt;/a&gt;&lt;br&gt;
如木桶、箱子等，破坏这些物体可以获得物资，并且物资投放是有游戏中的动态难度系统（DAS）决定的，设计师无需考虑每个箱子投放什么物品。&lt;/p&gt;
&lt;p&gt;●普通小钥匙：&lt;br&gt;
和主线流程无关，主要用途为收集品的收集&lt;/p&gt;
&lt;p&gt;●&lt;a href=&#34;https://www.bilibili.com/video/BV1DY4y1D7CX?t=693.7&#34;&gt;邪教徒：&lt;/a&gt;&lt;br&gt;
关卡的核心敌人，从对关卡结构的影响程度来看，分为不移动的怪物和巡逻型怪物。并且关卡核心玩法在被敌人发现前后从潜行式的探索玩法转变为战斗为核心的射击玩法。&lt;/p&gt;
&lt;p&gt;●&lt;a href=&#34;https://www.bilibili.com/video/BV1DY4y1D7CX?t=254.5&#34;&gt;主线相关物品:&lt;/a&gt;&lt;br&gt;
 与主线相关的道具，必须获得该道具才能进入下一箱庭，属于对关卡流程影响较大的	物品。&lt;/p&gt;
&lt;p&gt;●场景交互道具：&lt;br&gt;
○&lt;a href=&#34;https://www.bilibili.com/video/BV1DY4y1D7CX?t=838.1&#34;&gt;门&lt;/a&gt;&lt;br&gt;
○&lt;a href=&#34;https://www.bilibili.com/video/BV1DY4y1D7CX?t=854.3&#34;&gt;书柜&lt;/a&gt;&lt;br&gt;
○&lt;a href=&#34;https://www.bilibili.com/video/BV1DY4y1D7CX?t=866.5&#34;&gt;梯子&lt;/a&gt;&lt;br&gt;
○&lt;a href=&#34;https://www.bilibili.com/video/BV1DY4y1D7CX?t=807.2&#34;&gt;牛棚&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span id=&#34;2-关卡目标&#34;&gt; 2、关卡目标&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;村庄广场的目标是与邪教徒战斗，击杀一定数量的敌人或在围攻中坚持 5 分钟，直到教堂钟声敲响。&lt;/p&gt;
&lt;h3&gt;&lt;span id=&#34;3-关卡难度感知&#34;&gt; 3、关卡难度感知&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在《生化危机 4 重制版》中采用了动态的难度系统，将根据玩家的表现水平、玩家的当前资源量进行评估，对接下来投放的资源进行调整。&lt;br&gt;
通过动态难度系统，玩家在关卡中对难度的感知会始终保持在较高的水平。&lt;br&gt;
以村庄广场为例分析该关卡的难度流曲线如图：&lt;br&gt;
&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E5%BF%83%E6%B5%81.png&#34; alt=&#34;这是图片&#34;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;三-关卡流程图&#34;&gt; 三、关卡流程图&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id=&#34;1-关卡流程解析&#34;&gt; 1、关卡流程解析&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在进入村庄广场关卡后，会有一个道路选择，而左边的道路带给玩家更多的安全感，所以一周目的玩家大部分会选择左边的道路。&lt;br&gt;
&lt;a href=&#34;https://www.bilibili.com/video/BV1DY4y1D7CX?t=713.8&#34;&gt;https://www.bilibili.com/video/BV1DY4y1D7CX?t=713.8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E6%B5%81%E7%A8%8B1.png&#34; alt=&#34;流程1&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里主要分析正常流程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E6%B5%81%E7%A8%8B2.png&#34; alt=&#34;流程2&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这个流程中，主要分为两个阶段：未被敌人发现的阶段 和 被敌人发现的阶段，两个阶段的关卡目标有所不同。&lt;br&gt;
在未被发现的阶段中，玩家的行动区域较为固定，超过这个安全区域的地方会被敌人发现并进入战斗阶段。&lt;br&gt;
在战斗阶段中，需要玩家充分利用场景物件与邪教徒战斗。并且场景中有许多关卡元件用于辅助玩家战斗。&lt;br&gt;
流程回归：在关卡设计中可以通过多路线选择设计出不同的玩家动线，但是在生化危机 4 中，即使采用了多路径的设计，最终玩家都会回归到战斗流程中，即战斗流程为关卡核心&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;四-关卡俯视图&#34;&gt; 四、关卡俯视图&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;蓝线为玩家在未被发现时的行动路线，由于关卡目标需要经过战斗，所以所有的玩家动线最终都离不开战斗。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/Loading1.gif&#34; data-original=&#34;%E4%BF%AF%E8%A7%86%E5%9B%BE.png&#34; alt=&#34;俯视图&#34;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;五-关卡设计细节&#34;&gt; 五、关卡设计细节&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;1、关卡引导&lt;br&gt;
●难度引导：在进入关卡时，主路有大量邪教徒敌人，对于当前玩家缺少武器和弹药的情况下，直接进入战斗很明显会对玩家有较大的难度，因此引导玩家进入不会被敌人发现的右边的小路。&lt;/p&gt;
&lt;p&gt;●视觉引导：&lt;br&gt;
关卡中有大量诸如窗户、楼梯等场景元件用于进行视觉引导，引导玩家进入房间或使	用梯子进行探索或辅助战斗&lt;/p&gt;
&lt;p&gt;●奖励指引：&lt;br&gt;
关卡中投放了许多能用于投放资源的可破坏物体，这些在战斗过程中一定程度的引导	玩家的行动路线&lt;/p&gt;
&lt;p&gt;2、关于关卡是如何营造恐怖氛围感&lt;/p&gt;
&lt;p&gt;●视觉&lt;br&gt;
游戏中无论是邪教徒诡异的行为还是环境中大量的刑具、断肢等等都是营造恐怖分为	的重要因素&lt;/p&gt;
&lt;p&gt;●音效&lt;br&gt;
游戏中邪教徒发出的声音让玩家身临其境的感知到邪教徒的诡异从而营造恐怖氛围感&lt;/p&gt;
&lt;p&gt;●战斗中的 AI 设计&lt;br&gt;
在战斗过程中，关卡中的敌人会逐渐包围你，玩家必须迅速做出突围决定，如果玩家进入了小巷等狭窄空间时，会带来较强的刺激感和恐怖氛围。&lt;/p&gt;
&lt;p&gt;●高难度的关卡流程（核心）&lt;br&gt;
游戏的关卡难度都较高，例如较少的弹药资源和医疗物品，因此较高的关卡难度也塑造了真实的恐怖氛围。&lt;br&gt;
通过玩家的弱势地位和怪物的强势地位的差异营造出较强的恐怖氛围感。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;六-关卡流程视频&#34;&gt; 六、关卡流程视频&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;1、正常流程&lt;br&gt;
&lt;a href=&#34;https://www.bilibili.com/video/BV1DY4y1D7CX?t=682.5&#34;&gt; https://www.bilibili.com/video/BV1DY4y1D7CX?t=682.5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、速通流程&lt;br&gt;
&lt;a href=&#34;https://www.bilibili.com/video/BV1D84y1T7Nn/?spm_id_from=333.337.search-card.all.click&#34;&gt; https://www.bilibili.com/video/BV1D84y1T7Nn/?spm_id_from=333.337.search-card.all.click&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、手残流程&lt;br&gt;
&lt;a href=&#34;https://www.bilibili.com/video/BV1oP411d7Y2/?spm_id_from=333.337.search-card.all.click&#34;&gt; https://www.bilibili.com/video/BV1oP411d7Y2/?spm_id_from=333.337.search-card.all.click&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="关卡" />
        <updated>2023-10-14T16:00:00.000Z</updated>
    </entry>
</feed>
